!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADULT_SAMPLE	data/external.py	/^    ADULT_SAMPLE        = f'{URL}adult_sample.tgz'$/;"	v	class:URLs
ADULT_SAMPLE	local/data/external.py	/^    ADULT_SAMPLE        = f'{URL}adult_sample.tgz'$/;"	v	class:URLs
AG_NEWS	data/external.py	/^    AG_NEWS                 = f'{S3_NLP}ag_news_csv.tgz'$/;"	v	class:URLs
AG_NEWS	local/data/external.py	/^    AG_NEWS                 = f'{S3_NLP}ag_news_csv.tgz'$/;"	v	class:URLs
AMAZON_REVIEWS	data/external.py	/^    AMAZON_REVIEWS          = f'{S3_NLP}amazon_review_full_csv.tgz'$/;"	v	class:URLs
AMAZON_REVIEWS	local/data/external.py	/^    AMAZON_REVIEWS          = f'{S3_NLP}amazon_review_full_csv.tgz'$/;"	v	class:URLs
AMAZON_REVIEWS_POLARITY	data/external.py	/^    AMAZON_REVIEWS_POLARITY = f'{S3_NLP}amazon_review_polarity_csv.tgz'$/;"	v	class:URLs
AMAZON_REVIEWS_POLARITY	local/data/external.py	/^    AMAZON_REVIEWS_POLARITY = f'{S3_NLP}amazon_review_polarity_csv.tgz'$/;"	v	class:URLs
Adam	local/optimizer.py	/^def Adam(params, lr, mom=0.9, sqr_mom=0.99, eps=1e-5, wd=0., true_wd=True):$/;"	f
Adam	optimizer.py	/^def Adam(params, lr, mom=0.9, sqr_mom=0.99, eps=1e-5, wd=0., true_wd=True):$/;"	f
AdaptiveConcatPool2d	layers.py	/^class AdaptiveConcatPool2d(nn.Module):$/;"	c
AdaptiveConcatPool2d	local/layers.py	/^class AdaptiveConcatPool2d(nn.Module):$/;"	c
AvgLoss	learner.py	/^class AvgLoss(Metric):$/;"	c
AvgLoss	local/learner.py	/^class AvgLoss(Metric):$/;"	c
AvgMetric	learner.py	/^class AvgMetric(Metric):$/;"	c
AvgMetric	local/learner.py	/^class AvgMetric(Metric):$/;"	c
AvgSmoothLoss	learner.py	/^class AvgSmoothLoss(Metric):$/;"	c
AvgSmoothLoss	local/learner.py	/^class AvgSmoothLoss(Metric):$/;"	c
BCELossFlat	layers.py	/^def BCELossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
BCELossFlat	local/layers.py	/^def BCELossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
BCEWithLogitsLossFlat	layers.py	/^def BCEWithLogitsLossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
BCEWithLogitsLossFlat	local/layers.py	/^def BCEWithLogitsLossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
BIWI_HEAD_POSE	data/external.py	/^    BIWI_HEAD_POSE     = f"{S3_IMAGELOC}biwi_head_pose.tgz"$/;"	v	class:URLs
BIWI_HEAD_POSE	local/data/external.py	/^    BIWI_HEAD_POSE     = f"{S3_IMAGELOC}biwi_head_pose.tgz"$/;"	v	class:URLs
BIWI_SAMPLE	data/external.py	/^    BIWI_SAMPLE         = f'{URL}biwi_sample.tgz'$/;"	v	class:URLs
BIWI_SAMPLE	local/data/external.py	/^    BIWI_SAMPLE         = f'{URL}biwi_sample.tgz'$/;"	v	class:URLs
BatchNorm	layers.py	/^def BatchNorm(nf, norm_type=NormType.Batch, ndim=2, **kwargs):$/;"	f
BatchNorm	local/layers.py	/^def BatchNorm(nf, norm_type=NormType.Batch, ndim=2, **kwargs):$/;"	f
BatchNorm1dFlat	layers.py	/^class BatchNorm1dFlat(nn.BatchNorm1d):$/;"	c
BatchNorm1dFlat	local/layers.py	/^class BatchNorm1dFlat(nn.BatchNorm1d):$/;"	c
BnDropLin	layers.py	/^class BnDropLin(nn.Sequential):$/;"	c
BnDropLin	local/layers.py	/^class BnDropLin(nn.Sequential):$/;"	c
ByteToFloatTensor	data/core.py	/^class ByteToFloatTensor(Transform):$/;"	c
ByteToFloatTensor	local/data/core.py	/^class ByteToFloatTensor(Transform):$/;"	c
CALTECH_101	data/external.py	/^    CALTECH_101  = f'{S3_IMAGE}caltech_101.tgz'$/;"	v	class:URLs
CALTECH_101	local/data/external.py	/^    CALTECH_101  = f'{S3_IMAGE}caltech_101.tgz'$/;"	v	class:URLs
CAMVID	data/external.py	/^    CAMVID             = f'{S3_IMAGELOC}camvid.tgz'$/;"	v	class:URLs
CAMVID	local/data/external.py	/^    CAMVID             = f'{S3_IMAGELOC}camvid.tgz'$/;"	v	class:URLs
CAMVID_TINY	data/external.py	/^    CAMVID_TINY        = f'{URL}camvid_tiny.tgz'$/;"	v	class:URLs
CAMVID_TINY	local/data/external.py	/^    CAMVID_TINY        = f'{URL}camvid_tiny.tgz'$/;"	v	class:URLs
CARS	data/external.py	/^    CARS         = f'{S3_IMAGE}stanford-cars.tgz'$/;"	v	class:URLs
CARS	local/data/external.py	/^    CARS         = f'{S3_IMAGE}stanford-cars.tgz'$/;"	v	class:URLs
CIFAR	data/external.py	/^    CIFAR               = f'{URL}cifar10.tgz'$/;"	v	class:URLs
CIFAR	local/data/external.py	/^    CIFAR               = f'{URL}cifar10.tgz'$/;"	v	class:URLs
CIFAR_100	data/external.py	/^    CIFAR_100    = f'{S3_IMAGE}cifar100.tgz'$/;"	v	class:URLs
CIFAR_100	local/data/external.py	/^    CIFAR_100    = f'{S3_IMAGE}cifar100.tgz'$/;"	v	class:URLs
COCO_SAMPLE	data/external.py	/^    COCO_SAMPLE         = f'{S3_COCO}coco_sample.tgz'$/;"	v	class:URLs
COCO_SAMPLE	local/data/external.py	/^    COCO_SAMPLE         = f'{S3_COCO}coco_sample.tgz'$/;"	v	class:URLs
COCO_TINY	data/external.py	/^    COCO_TINY           = f'{URL}coco_tiny.tgz'$/;"	v	class:URLs
COCO_TINY	local/data/external.py	/^    COCO_TINY           = f'{URL}coco_tiny.tgz'$/;"	v	class:URLs
CUB_200_2011	data/external.py	/^    CUB_200_2011 = f'{S3_IMAGE}CUB_200_2011.tgz'$/;"	v	class:URLs
CUB_200_2011	local/data/external.py	/^    CUB_200_2011 = f'{S3_IMAGE}CUB_200_2011.tgz'$/;"	v	class:URLs
Callable	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Callable	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Callback	learner.py	/^class Callback():$/;"	c
Callback	local/learner.py	/^class Callback():$/;"	c
CancelBatchException	learner.py	/^class CancelBatchException(Exception): pass$/;"	c
CancelBatchException	local/learner.py	/^class CancelBatchException(Exception): pass$/;"	c
CancelEpochException	learner.py	/^class CancelEpochException(Exception): pass$/;"	c
CancelEpochException	local/learner.py	/^class CancelEpochException(Exception): pass$/;"	c
CancelFitException	learner.py	/^class CancelFitException  (Exception): pass$/;"	c
CancelFitException	local/learner.py	/^class CancelFitException  (Exception): pass$/;"	c
CancelTrainException	learner.py	/^class CancelTrainException(Exception): pass$/;"	c
CancelTrainException	local/learner.py	/^class CancelTrainException(Exception): pass$/;"	c
CancelValidException	learner.py	/^class CancelValidException(Exception): pass$/;"	c
CancelValidException	local/learner.py	/^class CancelValidException(Exception): pass$/;"	c
Categorize	data/core.py	/^class Categorize(Transform):$/;"	c
Categorize	local/data/core.py	/^class Categorize(Transform):$/;"	c
Config	data/external.py	/^            from fastai.datasets import Config$/;"	i
Config	local/data/external.py	/^            from fastai.datasets import Config$/;"	i
Config	local/notebook/export2html.py	/^from traitlets.config import Config$/;"	i
Config	notebook/export2html.py	/^from traitlets.config import Config$/;"	i
ConfigKey	data/external.py	/^ConfigKey = Enum('ConfigKey', 'Data Archive Model')$/;"	v
ConfigKey	local/data/external.py	/^ConfigKey = Enum('ConfigKey', 'Data Archive Model')$/;"	v
ConvLayer	layers.py	/^class ConvLayer(nn.Sequential):$/;"	c
ConvLayer	local/layers.py	/^class ConvLayer(nn.Sequential):$/;"	c
Counter	imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
Counter	local/imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
CrossEntropyLossFlat	layers.py	/^def CrossEntropyLossFlat(*args, axis=-1, **kwargs):$/;"	f
CrossEntropyLossFlat	local/layers.py	/^def CrossEntropyLossFlat(*args, axis=-1, **kwargs):$/;"	f
Cuda	data/core.py	/^class Cuda(Transform):$/;"	c
Cuda	local/data/core.py	/^class Cuda(Transform):$/;"	c
DBPEDIA	data/external.py	/^    DBPEDIA                 = f'{S3_NLP}dbpedia_csv.tgz'$/;"	v	class:URLs
DBPEDIA	local/data/external.py	/^    DBPEDIA                 = f'{S3_NLP}dbpedia_csv.tgz'$/;"	v	class:URLs
DOGS	data/external.py	/^    DOGS = f'{URL}dogscats.tgz'$/;"	v	class:URLs
DOGS	local/data/external.py	/^    DOGS = f'{URL}dogscats.tgz'$/;"	v	class:URLs
DataBunch	data/core.py	/^class DataBunch(GetAttr):$/;"	c
DataBunch	local/data/core.py	/^class DataBunch(GetAttr):$/;"	c
DataLoader	imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
DataLoader	local/imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
DataSource	data/source.py	/^class DataSource(TfmdList):$/;"	c
DataSource	local/data/source.py	/^class DataSource(TfmdList):$/;"	c
Debugger	layers.py	/^class Debugger(nn.Module):$/;"	c
Debugger	local/layers.py	/^class Debugger(nn.Module):$/;"	c
DsrcSubset	data/source.py	/^class DsrcSubset():$/;"	c
DsrcSubset	local/data/source.py	/^class DsrcSubset():$/;"	c
Embedding	layers.py	/^class Embedding(nn.Embedding):$/;"	c
Embedding	local/layers.py	/^class Embedding(nn.Embedding):$/;"	c
Enum	imports.py	/^from enum import Enum,IntEnum$/;"	i
Enum	local/imports.py	/^from enum import Enum,IntEnum$/;"	i
ExecutePreprocessor	local/notebook/export2html.py	/^from nbconvert.preprocessors import ExecutePreprocessor, Preprocessor$/;"	i
ExecutePreprocessor	notebook/export2html.py	/^from nbconvert.preprocessors import ExecutePreprocessor, Preprocessor$/;"	i
ExecuteShowDocPreprocessor	local/notebook/export2html.py	/^class ExecuteShowDocPreprocessor(ExecutePreprocessor):$/;"	c
ExecuteShowDocPreprocessor	notebook/export2html.py	/^class ExecuteShowDocPreprocessor(ExecutePreprocessor):$/;"	c
F	imports.py	/^import torch.nn.functional as F$/;"	i
F	local/imports.py	/^import torch.nn.functional as F$/;"	i
FASTAI_DOCS	local/notebook/showdoc.py	/^FASTAI_DOCS = ''$/;"	v
FASTAI_DOCS	notebook/showdoc.py	/^FASTAI_DOCS = ''$/;"	v
FASTAI_NB_DEV	local/notebook/showdoc.py	/^FASTAI_NB_DEV = 'https:\/\/nbviewer.jupyter.org\/github\/fastai\/fastai_docs\/blob\/master\/dev\/'$/;"	v
FASTAI_NB_DEV	notebook/showdoc.py	/^FASTAI_NB_DEV = 'https:\/\/nbviewer.jupyter.org\/github\/fastai\/fastai_docs\/blob\/master\/dev\/'$/;"	v
FLOWERS	data/external.py	/^    FLOWERS      = f'{S3_IMAGE}oxford-102-flowers.tgz'$/;"	v	class:URLs
FLOWERS	local/data/external.py	/^    FLOWERS      = f'{S3_IMAGE}oxford-102-flowers.tgz'$/;"	v	class:URLs
FOOD	data/external.py	/^    FOOD         = f'{S3_IMAGE}food-101.tgz'$/;"	v	class:URLs
FOOD	local/data/external.py	/^    FOOD         = f'{S3_IMAGE}food-101.tgz'$/;"	v	class:URLs
FileGetter	data/core.py	/^def FileGetter(suf='', extensions=None, recurse=True, include=None):$/;"	f
FileGetter	local/data/core.py	/^def FileGetter(suf='', extensions=None, recurse=True, include=None):$/;"	f
Flatten	layers.py	/^class Flatten(nn.Module):$/;"	c
Flatten	local/layers.py	/^class Flatten(nn.Module):$/;"	c
FlattenedLoss	layers.py	/^class FlattenedLoss():$/;"	c
FlattenedLoss	local/layers.py	/^class FlattenedLoss():$/;"	c
GatherPredsCallback	learner.py	/^class GatherPredsCallback(Callback):$/;"	c
GatherPredsCallback	local/learner.py	/^class GatherPredsCallback(Callback):$/;"	c
Generator	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Generator	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
GetAttr	core.py	/^class GetAttr:$/;"	c
GetAttr	local/core.py	/^class GetAttr:$/;"	c
GrandparentSplitter	data/core.py	/^def GrandparentSplitter(train_name='train', valid_name='valid'):$/;"	f
GrandparentSplitter	local/data/core.py	/^def GrandparentSplitter(train_name='train', valid_name='valid'):$/;"	f
HTMLExporter	local/notebook/export2html.py	/^from nbconvert import HTMLExporter$/;"	i
HTMLExporter	local/notebook/showdoc.py	/^from nbconvert import HTMLExporter$/;"	i
HTMLExporter	notebook/export2html.py	/^from nbconvert import HTMLExporter$/;"	i
HTMLExporter	notebook/showdoc.py	/^from nbconvert import HTMLExporter$/;"	i
HUMAN_NUMBERS	data/external.py	/^    HUMAN_NUMBERS       = f'{URL}human_numbers.tgz'$/;"	v	class:URLs
HUMAN_NUMBERS	local/data/external.py	/^    HUMAN_NUMBERS       = f'{URL}human_numbers.tgz'$/;"	v	class:URLs
IMAGENETTE	data/external.py	/^    IMAGENETTE          = f'{S3_IMAGE}imagenette.tgz'$/;"	v	class:URLs
IMAGENETTE	local/data/external.py	/^    IMAGENETTE          = f'{S3_IMAGE}imagenette.tgz'$/;"	v	class:URLs
IMAGENETTE_160	data/external.py	/^    IMAGENETTE_160      = f'{S3_IMAGE}imagenette-160.tgz'$/;"	v	class:URLs
IMAGENETTE_160	local/data/external.py	/^    IMAGENETTE_160      = f'{S3_IMAGE}imagenette-160.tgz'$/;"	v	class:URLs
IMAGENETTE_320	data/external.py	/^    IMAGENETTE_320      = f'{S3_IMAGE}imagenette-320.tgz'$/;"	v	class:URLs
IMAGENETTE_320	local/data/external.py	/^    IMAGENETTE_320      = f'{S3_IMAGE}imagenette-320.tgz'$/;"	v	class:URLs
IMAGEWOOF	data/external.py	/^    IMAGEWOOF           = f'{S3_IMAGE}imagewoof.tgz'$/;"	v	class:URLs
IMAGEWOOF	local/data/external.py	/^    IMAGEWOOF           = f'{S3_IMAGE}imagewoof.tgz'$/;"	v	class:URLs
IMAGEWOOF_160	data/external.py	/^    IMAGEWOOF_160       = f'{S3_IMAGE}imagewoof-160.tgz'$/;"	v	class:URLs
IMAGEWOOF_160	local/data/external.py	/^    IMAGEWOOF_160       = f'{S3_IMAGE}imagewoof-160.tgz'$/;"	v	class:URLs
IMAGEWOOF_320	data/external.py	/^    IMAGEWOOF_320       = f'{S3_IMAGE}imagewoof-320.tgz'$/;"	v	class:URLs
IMAGEWOOF_320	local/data/external.py	/^    IMAGEWOOF_320       = f'{S3_IMAGE}imagewoof-320.tgz'$/;"	v	class:URLs
IMDB	data/external.py	/^    IMDB                = f'{S3_NLP}imdb.tgz'$/;"	v	class:URLs
IMDB	local/data/external.py	/^    IMDB                = f'{S3_NLP}imdb.tgz'$/;"	v	class:URLs
IMDB_SAMPLE	data/external.py	/^    IMDB_SAMPLE         = f'{URL}imdb_sample.tgz'$/;"	v	class:URLs
IMDB_SAMPLE	local/data/external.py	/^    IMDB_SAMPLE         = f'{URL}imdb_sample.tgz'$/;"	v	class:URLs
IN_COLAB	local/notebook/core.py	/^IN_COLAB = in_colab()$/;"	v
IN_COLAB	notebook/core.py	/^IN_COLAB = in_colab()$/;"	v
IN_IPYTHON	local/notebook/core.py	/^IN_IPYTHON = in_ipython()$/;"	v
IN_IPYTHON	notebook/core.py	/^IN_IPYTHON = in_ipython()$/;"	v
IN_NOTEBOOK	local/notebook/core.py	/^IN_NOTEBOOK = in_notebook()/;"	v
IN_NOTEBOOK	notebook/core.py	/^IN_NOTEBOOK = in_notebook()/;"	v
Image	local/vision/core.py	/^from PIL import Image$/;"	i
Image	vision/core.py	/^from PIL import Image$/;"	i
ImageConverter	local/vision/core.py	/^class ImageConverter(Transform):$/;"	c
ImageConverter	vision/core.py	/^class ImageConverter(Transform):$/;"	c
ImageGetter	data/core.py	/^def ImageGetter(suf='', recurse=True, include=None):$/;"	f
ImageGetter	local/data/core.py	/^def ImageGetter(suf='', recurse=True, include=None):$/;"	f
ImageItem	data/core.py	/^class ImageItem:$/;"	c
ImageItem	local/data/core.py	/^class ImageItem:$/;"	c
ImageResizer	local/vision/core.py	/^class ImageResizer(Transform):$/;"	c
ImageResizer	vision/core.py	/^class ImageResizer(Transform):$/;"	c
ImageToByteTensor	local/vision/core.py	/^class ImageToByteTensor(Transform):$/;"	c
ImageToByteTensor	vision/core.py	/^class ImageToByteTensor(Transform):$/;"	c
Imagify	local/vision/core.py	/^class Imagify(Transform):$/;"	c
Imagify	vision/core.py	/^class Imagify(Transform):$/;"	c
IntEnum	imports.py	/^from enum import Enum,IntEnum$/;"	i
IntEnum	local/imports.py	/^from enum import Enum,IntEnum$/;"	i
Item	data/pipeline.py	/^class Item():$/;"	c
Item	local/data/pipeline.py	/^class Item():$/;"	c
Iterable	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Iterable	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Iterator	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Iterator	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
L	core.py	/^class L(GetAttr):$/;"	c
L	local/core.py	/^class L(GetAttr):$/;"	c
LOCAL_PATH	data/external.py	/^    LOCAL_PATH = Path.cwd()$/;"	v	class:URLs
LOCAL_PATH	local/data/external.py	/^    LOCAL_PATH = Path.cwd()$/;"	v	class:URLs
LSUN_BEDROOMS	data/external.py	/^    LSUN_BEDROOMS      = f'{S3_IMAGE}bedroom.tgz'$/;"	v	class:URLs
LSUN_BEDROOMS	local/data/external.py	/^    LSUN_BEDROOMS      = f'{S3_IMAGE}bedroom.tgz'$/;"	v	class:URLs
Lambda	layers.py	/^class Lambda(nn.Module):$/;"	c
Lambda	local/layers.py	/^class Lambda(nn.Module):$/;"	c
LambdaItem	data/source.py	/^class LambdaItem:$/;"	c
LambdaItem	local/data/source.py	/^class LambdaItem:$/;"	c
Learner	learner.py	/^class Learner():$/;"	c
Learner	local/learner.py	/^class Learner():$/;"	c
List	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
List	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
MDL	data/external.py	/^    MDL = 'http:\/\/files.fast.ai\/models\/'$/;"	v	class:URLs
MDL	local/data/external.py	/^    MDL = 'http:\/\/files.fast.ai\/models\/'$/;"	v	class:URLs
ML_SAMPLE	data/external.py	/^    ML_SAMPLE           = f'{URL}movie_lens_sample.tgz'$/;"	v	class:URLs
ML_SAMPLE	local/data/external.py	/^    ML_SAMPLE           = f'{URL}movie_lens_sample.tgz'$/;"	v	class:URLs
MNIST	data/external.py	/^    MNIST        = f'{S3_IMAGE}mnist_png.tgz'$/;"	v	class:URLs
MNIST	local/data/external.py	/^    MNIST        = f'{S3_IMAGE}mnist_png.tgz'$/;"	v	class:URLs
MNIST_SAMPLE	data/external.py	/^    MNIST_SAMPLE        = f'{URL}mnist_sample.tgz'$/;"	v	class:URLs
MNIST_SAMPLE	local/data/external.py	/^    MNIST_SAMPLE        = f'{URL}mnist_sample.tgz'$/;"	v	class:URLs
MNIST_TINY	data/external.py	/^    MNIST_TINY          = f'{URL}mnist_tiny.tgz'$/;"	v	class:URLs
MNIST_TINY	local/data/external.py	/^    MNIST_TINY          = f'{URL}mnist_tiny.tgz'$/;"	v	class:URLs
MNIST_VAR_SIZE_TINY	data/external.py	/^    MNIST_VAR_SIZE_TINY = f'{S3_IMAGE}mnist_var_size_tiny.tgz'$/;"	v	class:URLs
MNIST_VAR_SIZE_TINY	local/data/external.py	/^    MNIST_VAR_SIZE_TINY = f'{S3_IMAGE}mnist_var_size_tiny.tgz'$/;"	v	class:URLs
MSELossFlat	layers.py	/^def MSELossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
MSELossFlat	local/layers.py	/^def MSELossFlat(*args, axis=-1, floatify=True, **kwargs):$/;"	f
MT_ENG_FRA	data/external.py	/^    MT_ENG_FRA              = f'{S3_NLP}giga-fren.tgz'$/;"	v	class:URLs
MT_ENG_FRA	local/data/external.py	/^    MT_ENG_FRA              = f'{S3_NLP}giga-fren.tgz'$/;"	v	class:URLs
Markdown	local/notebook/showdoc.py	/^from IPython.display import Markdown,display$/;"	i
Markdown	notebook/showdoc.py	/^from IPython.display import Markdown,display$/;"	i
MergeLayer	layers.py	/^class MergeLayer(nn.Module):$/;"	c
MergeLayer	local/layers.py	/^class MergeLayer(nn.Module):$/;"	c
Metric	learner.py	/^class Metric():$/;"	c
Metric	local/learner.py	/^class Metric():$/;"	c
NoneType	imports.py	/^NoneType = type(None)$/;"	v
NoneType	local/imports.py	/^NoneType = type(None)$/;"	v
NormType	layers.py	/^NormType = Enum('NormType', 'Batch BatchZero Weight Spectral')$/;"	v
NormType	local/layers.py	/^NormType = Enum('NormType', 'Batch BatchZero Weight Spectral')$/;"	v
Normalize	data/core.py	/^class Normalize(Transform):$/;"	c
Normalize	local/data/core.py	/^class Normalize(Transform):$/;"	c
NotebookNotary	local/notebook/export2html.py	/^from nbformat.sign import NotebookNotary$/;"	i
NotebookNotary	notebook/export2html.py	/^from nbformat.sign import NotebookNotary$/;"	i
OPENAI_TRANSFORMER	data/external.py	/^    OPENAI_TRANSFORMER = f'{S3_MODEL}transformer.tgz'$/;"	v	class:URLs
OPENAI_TRANSFORMER	local/data/external.py	/^    OPENAI_TRANSFORMER = f'{S3_MODEL}transformer.tgz'$/;"	v	class:URLs
Optimizer	local/optimizer.py	/^class Optimizer():$/;"	c
Optimizer	optimizer.py	/^class Optimizer():$/;"	c
Optional	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Optional	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
OrderedDict	imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
OrderedDict	local/imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
PASCAL_2007	data/external.py	/^    PASCAL_2007        = f'{S3_IMAGELOC}pascal_2007.tgz'$/;"	v	class:URLs
PASCAL_2007	local/data/external.py	/^    PASCAL_2007        = f'{S3_IMAGELOC}pascal_2007.tgz'$/;"	v	class:URLs
PASCAL_2012	data/external.py	/^    PASCAL_2012        = f'{S3_IMAGELOC}pascal_2012.tgz'$/;"	v	class:URLs
PASCAL_2012	local/data/external.py	/^    PASCAL_2012        = f'{S3_IMAGELOC}pascal_2012.tgz'$/;"	v	class:URLs
PETS	data/external.py	/^    PETS         = f'{S3_IMAGE}oxford-iiit-pet.tgz'$/;"	v	class:URLs
PETS	local/data/external.py	/^    PETS         = f'{S3_IMAGE}oxford-iiit-pet.tgz'$/;"	v	class:URLs
PIL	imports.py	/^import PIL,requests,yaml$/;"	i
PIL	local/imports.py	/^import PIL,requests,yaml$/;"	i
PLANET_SAMPLE	data/external.py	/^    PLANET_SAMPLE       = f'{URL}planet_sample.tgz'$/;"	v	class:URLs
PLANET_SAMPLE	local/data/external.py	/^    PLANET_SAMPLE       = f'{URL}planet_sample.tgz'$/;"	v	class:URLs
PLANET_TINY	data/external.py	/^    PLANET_TINY         = f'{URL}planet_tiny.tgz'$/;"	v	class:URLs
PLANET_TINY	local/data/external.py	/^    PLANET_TINY         = f'{URL}planet_tiny.tgz'$/;"	v	class:URLs
PartialLayer	layers.py	/^class PartialLayer(Lambda):$/;"	c
PartialLayer	local/layers.py	/^class PartialLayer(Lambda):$/;"	c
Path	imports.py	/^from pathlib import Path$/;"	i
Path	local/imports.py	/^from pathlib import Path$/;"	i
Path	local/notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
Path	notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
Pipeline	data/pipeline.py	/^class Pipeline(Transform):$/;"	c
Pipeline	local/data/pipeline.py	/^class Pipeline(Transform):$/;"	c
PixelShuffle_ICNR	layers.py	/^class PixelShuffle_ICNR(nn.Sequential):$/;"	c
PixelShuffle_ICNR	local/layers.py	/^class PixelShuffle_ICNR(nn.Sequential):$/;"	c
PoolFlatten	layers.py	/^class PoolFlatten(nn.Sequential):$/;"	c
PoolFlatten	local/layers.py	/^class PoolFlatten(nn.Sequential):$/;"	c
PooledSelfAttention2d	layers.py	/^class PooledSelfAttention2d(nn.Module):$/;"	c
PooledSelfAttention2d	local/layers.py	/^class PooledSelfAttention2d(nn.Module):$/;"	c
Preprocessor	local/notebook/export2html.py	/^from nbconvert.preprocessors import ExecutePreprocessor, Preprocessor$/;"	i
Preprocessor	notebook/export2html.py	/^from nbconvert.preprocessors import ExecutePreprocessor, Preprocessor$/;"	i
RMSProp	local/optimizer.py	/^def RMSProp(params, lr, sqr_mom=0.99, mom=0., wd=0., true_wd=True):$/;"	f
RMSProp	optimizer.py	/^def RMSProp(params, lr, sqr_mom=0.99, mom=0., wd=0., true_wd=True):$/;"	f
RandomSampler	imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
RandomSampler	local/imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
RandomSplitter	data/core.py	/^def RandomSplitter(valid_pct=0.2, seed=None, **kwargs):$/;"	f
RandomSplitter	local/data/core.py	/^def RandomSplitter(valid_pct=0.2, seed=None, **kwargs):$/;"	f
Recorder	learner.py	/^class Recorder(Callback):$/;"	c
Recorder	local/learner.py	/^class Recorder(Callback):$/;"	c
RegexLabeller	data/core.py	/^def RegexLabeller(pat):$/;"	f
RegexLabeller	local/data/core.py	/^def RegexLabeller(pat):$/;"	f
ResBlock	layers.py	/^class ResBlock(nn.Module):$/;"	c
ResBlock	local/layers.py	/^class ResBlock(nn.Module):$/;"	c
ResizeBatch	layers.py	/^class ResizeBatch(nn.Module):$/;"	c
ResizeBatch	local/layers.py	/^class ResizeBatch(nn.Module):$/;"	c
S3	data/external.py	/^    S3 = 'https:\/\/s3.amazonaws.com\/fast-ai-'$/;"	v	class:URLs
S3	local/data/external.py	/^    S3 = 'https:\/\/s3.amazonaws.com\/fast-ai-'$/;"	v	class:URLs
S3_COCO	data/external.py	/^    S3_COCO     = f'{S3}coco\/'$/;"	v	class:URLs
S3_COCO	local/data/external.py	/^    S3_COCO     = f'{S3}coco\/'$/;"	v	class:URLs
S3_IMAGE	data/external.py	/^    S3_IMAGE    = f'{S3}imageclas\/'$/;"	v	class:URLs
S3_IMAGE	local/data/external.py	/^    S3_IMAGE    = f'{S3}imageclas\/'$/;"	v	class:URLs
S3_IMAGELOC	data/external.py	/^    S3_IMAGELOC = f'{S3}imagelocal\/'$/;"	v	class:URLs
S3_IMAGELOC	local/data/external.py	/^    S3_IMAGELOC = f'{S3}imagelocal\/'$/;"	v	class:URLs
S3_MODEL	data/external.py	/^    S3_MODEL    = f'{S3}modelzoo\/'$/;"	v	class:URLs
S3_MODEL	local/data/external.py	/^    S3_MODEL    = f'{S3}modelzoo\/'$/;"	v	class:URLs
S3_NLP	data/external.py	/^    S3_NLP      = f'{S3}nlp\/'$/;"	v	class:URLs
S3_NLP	local/data/external.py	/^    S3_NLP      = f'{S3}nlp\/'$/;"	v	class:URLs
SGD	local/optimizer.py	/^def SGD(params, lr, mom=0., wd=0., true_wd=True):$/;"	f
SGD	optimizer.py	/^def SGD(params, lr, mom=0., wd=0., true_wd=True):$/;"	f
SOGOU_NEWS	data/external.py	/^    SOGOU_NEWS              = f'{S3_NLP}sogou_news_csv.tgz'$/;"	v	class:URLs
SOGOU_NEWS	local/data/external.py	/^    SOGOU_NEWS              = f'{S3_NLP}sogou_news_csv.tgz'$/;"	v	class:URLs
SOURCE_URL	local/notebook/showdoc.py	/^SOURCE_URL = "https:\/\/github.com\/fastai\/fastai_docs\/tree\/master\/dev\/"$/;"	v
SOURCE_URL	notebook/showdoc.py	/^SOURCE_URL = "https:\/\/github.com\/fastai\/fastai_docs\/tree\/master\/dev\/"$/;"	v
SelfAttention	layers.py	/^class SelfAttention(nn.Module):$/;"	c
SelfAttention	local/layers.py	/^class SelfAttention(nn.Module):$/;"	c
Sequence	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Sequence	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
SequentialEx	layers.py	/^class SequentialEx(nn.Module):$/;"	c
SequentialEx	local/layers.py	/^class SequentialEx(nn.Module):$/;"	c
SequentialSampler	imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
SequentialSampler	local/imports.py	/^from torch.utils.data import DataLoader,SequentialSampler,RandomSampler$/;"	i
SigmoidRange	layers.py	/^class SigmoidRange(nn.Module):$/;"	c
SigmoidRange	local/layers.py	/^class SigmoidRange(nn.Module):$/;"	c
SimpleCNN	layers.py	/^class SimpleCNN(nn.Sequential):$/;"	c
SimpleCNN	local/layers.py	/^class SimpleCNN(nn.Sequential):$/;"	c
SimpleNamespace	imports.py	/^from types import SimpleNamespace$/;"	i
SimpleNamespace	local/imports.py	/^from types import SimpleNamespace$/;"	i
StatefulOptimizer	local/optimizer.py	/^class StatefulOptimizer(Optimizer):$/;"	c
StatefulOptimizer	optimizer.py	/^class StatefulOptimizer(Optimizer):$/;"	c
Tensor	imports.py	/^from torch import as_tensor,Tensor$/;"	i
Tensor	local/imports.py	/^from torch import as_tensor,Tensor$/;"	i
TextWrapper	imports.py	/^from textwrap import TextWrapper$/;"	i
TextWrapper	local/imports.py	/^from textwrap import TextWrapper$/;"	i
TfmOver	data/pipeline.py	/^class TfmOver(Transform):$/;"	c
TfmOver	local/data/pipeline.py	/^class TfmOver(Transform):$/;"	c
TfmdDL	data/core.py	/^class TfmdDL(GetAttr):$/;"	c
TfmdDL	local/data/core.py	/^class TfmdDL(GetAttr):$/;"	c
TfmdList	data/pipeline.py	/^class TfmdList(GetAttr):$/;"	c
TfmdList	local/data/pipeline.py	/^class TfmdList(GetAttr):$/;"	c
TitledImageItem	data/core.py	/^class TitledImageItem:$/;"	c
TitledImageItem	local/data/core.py	/^class TitledImageItem:$/;"	c
TrainEvalCallback	learner.py	/^class TrainEvalCallback(Callback):$/;"	c
TrainEvalCallback	local/learner.py	/^class TrainEvalCallback(Callback):$/;"	c
Transform	data/pipeline.py	/^class Transform():$/;"	c
Transform	local/data/pipeline.py	/^class Transform():$/;"	c
Tuple	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Tuple	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
URL	data/external.py	/^    URL = 'http:\/\/files.fast.ai\/data\/examples\/'$/;"	v	class:URLs
URL	local/data/external.py	/^    URL = 'http:\/\/files.fast.ai\/data\/examples\/'$/;"	v	class:URLs
URLs	data/external.py	/^class URLs():$/;"	c
URLs	local/data/external.py	/^class URLs():$/;"	c
Union	imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
Union	local/imports.py	/^from typing import Iterable,Iterator,Generator,Callable,Sequence,List,Tuple,Union,Optional$/;"	i
VerboseCallback	learner.py	/^class VerboseCallback(Callback):$/;"	c
VerboseCallback	local/learner.py	/^class VerboseCallback(Callback):$/;"	c
View	layers.py	/^class View(nn.Module):$/;"	c
View	local/layers.py	/^class View(nn.Module):$/;"	c
WIKITEXT	data/external.py	/^    WIKITEXT                = f'{S3_NLP}wikitext-103.tgz'$/;"	v	class:URLs
WIKITEXT	local/data/external.py	/^    WIKITEXT                = f'{S3_NLP}wikitext-103.tgz'$/;"	v	class:URLs
WIKITEXT_TINY	data/external.py	/^    WIKITEXT_TINY           = f'{S3_NLP}wikitext-2.tgz'$/;"	v	class:URLs
WIKITEXT_TINY	local/data/external.py	/^    WIKITEXT_TINY           = f'{S3_NLP}wikitext-2.tgz'$/;"	v	class:URLs
WT103	data/external.py	/^    WT103              = f'{S3_MODEL}wt103.tgz'$/;"	v	class:URLs
WT103	local/data/external.py	/^    WT103              = f'{S3_MODEL}wt103.tgz'$/;"	v	class:URLs
WT103_1	data/external.py	/^    WT103_1            = f'{S3_MODEL}wt103-1.tgz'$/;"	v	class:URLs
WT103_1	local/data/external.py	/^    WT103_1            = f'{S3_MODEL}wt103-1.tgz'$/;"	v	class:URLs
YAHOO_ANSWERS	data/external.py	/^    YAHOO_ANSWERS           = f'{S3_NLP}yahoo_answers_csv.tgz'$/;"	v	class:URLs
YAHOO_ANSWERS	local/data/external.py	/^    YAHOO_ANSWERS           = f'{S3_NLP}yahoo_answers_csv.tgz'$/;"	v	class:URLs
YELP_REVIEWS	data/external.py	/^    YELP_REVIEWS            = f'{S3_NLP}yelp_review_full_csv.tgz'$/;"	v	class:URLs
YELP_REVIEWS	local/data/external.py	/^    YELP_REVIEWS            = f'{S3_NLP}yelp_review_full_csv.tgz'$/;"	v	class:URLs
YELP_REVIEWS_POLARITY	data/external.py	/^    YELP_REVIEWS_POLARITY   = f'{S3_NLP}yelp_review_polarity_csv.tgz'$/;"	v	class:URLs
YELP_REVIEWS_POLARITY	local/data/external.py	/^    YELP_REVIEWS_POLARITY   = f'{S3_NLP}yelp_review_polarity_csv.tgz'$/;"	v	class:URLs
_DataLoader__getattr	data/core.py	/^def _DataLoader__getattr(self,k):$/;"	f
_DataLoader__getattr	local/data/core.py	/^def _DataLoader__getattr(self,k):$/;"	f
__add__	core.py	/^    def __add__ (a,b): return L(a.items+_listify(b))$/;"	m	class:L	file:
__add__	local/core.py	/^    def __add__ (a,b): return L(a.items+_listify(b))$/;"	m	class:L	file:
__addi__	core.py	/^    def __addi__(a,b):$/;"	m	class:L	file:
__addi__	local/core.py	/^    def __addi__(a,b):$/;"	m	class:L	file:
__all__	core.py	/^__all__ = ['newchk', 'patch', 'chk', 'tensor', 'add_docs', 'docs', 'custom_dir', 'is_iter', 'coll_repr', 'GetAttr', 'L',$/;"	v
__all__	data/augment.py	/^__all__ = []$/;"	v
__all__	data/blocks.py	/^__all__ = []/;"	v
__all__	data/core.py	/^__all__ = ['get_files', 'FileGetter', 'image_extensions', 'get_image_files', 'ImageGetter', 'RandomSplitter',$/;"	v
__all__	data/external.py	/^__all__ = ['download_url', 'URLs', 'get_path', 'ConfigKey', 'download_data', 'untar_data']$/;"	v
__all__	data/pipeline.py	/^__all__ = ['show_title', 'Item', 'Transform', 'Pipeline', 'make_tfm', 'TfmdList', 'TfmOver']$/;"	v
__all__	data/source.py	/^__all__ = ['LambdaItem', 'DataSource', 'DsrcSubset']$/;"	v
__all__	layers.py	/^__all__ = ['Lambda', 'PartialLayer', 'View', 'ResizeBatch', 'Flatten', 'Debugger', 'sigmoid_range', 'SigmoidRange',$/;"	v
__all__	learner.py	/^__all__ = ['Callback', 'TrainEvalCallback', 'CancelFitException', 'CancelEpochException', 'CancelTrainException',$/;"	v
__all__	local/core.py	/^__all__ = ['newchk', 'patch', 'chk', 'tensor', 'add_docs', 'docs', 'custom_dir', 'is_iter', 'coll_repr', 'GetAttr', 'L',$/;"	v
__all__	local/data/augment.py	/^__all__ = []$/;"	v
__all__	local/data/blocks.py	/^__all__ = []/;"	v
__all__	local/data/core.py	/^__all__ = ['get_files', 'FileGetter', 'image_extensions', 'get_image_files', 'ImageGetter', 'RandomSplitter',$/;"	v
__all__	local/data/external.py	/^__all__ = ['download_url', 'URLs', 'get_path', 'ConfigKey', 'download_data', 'untar_data']$/;"	v
__all__	local/data/pipeline.py	/^__all__ = ['show_title', 'Item', 'Transform', 'Pipeline', 'make_tfm', 'TfmdList', 'TfmOver']$/;"	v
__all__	local/data/source.py	/^__all__ = ['LambdaItem', 'DataSource', 'DsrcSubset']$/;"	v
__all__	local/layers.py	/^__all__ = ['Lambda', 'PartialLayer', 'View', 'ResizeBatch', 'Flatten', 'Debugger', 'sigmoid_range', 'SigmoidRange',$/;"	v
__all__	local/learner.py	/^__all__ = ['Callback', 'TrainEvalCallback', 'CancelFitException', 'CancelEpochException', 'CancelTrainException',$/;"	v
__all__	local/nbdoc.py	/^__all__ = []$/;"	v
__all__	local/notebook/core.py	/^__all__ = ['in_ipython', 'IN_IPYTHON', 'in_colab', 'IN_COLAB', 'in_notebook', 'IN_NOTEBOOK']$/;"	v
__all__	local/notebook/export.py	/^__all__ = ['read_nb', 'check_re', 'is_export', 'find_default_export', 'export_names', 'extra_add', 'notebook2script',$/;"	v
__all__	local/notebook/export2html.py	/^__all__ = ['remove_widget_state', 'hide_cells', 'clean_exports', 'treat_backticks', 'convert_links', 'add_jekyll_notes',$/;"	v
__all__	local/notebook/showdoc.py	/^__all__ = ['is_enum', 'add_pytorch_index', 'is_fastai_module', 'FASTAI_DOCS', 'doc_link', 'add_doc_links',$/;"	v
__all__	local/optimizer.py	/^__all__ = ['Optimizer', 'sgd_step', 'weight_decay', 'l2_reg', 'StatefulOptimizer', 'average_grad', 'average_sqr_grad',$/;"	v
__all__	local/test.py	/^__all__ = ['test_fail', 'test', 'nequals', 'test_eq', 'test_ne', 'is_close', 'test_close', 'test_is', 'test_stdout']$/;"	v
__all__	local/vision/core.py	/^__all__ = ['Image', 'Imagify', 'ImageConverter', 'image_resize', 'ImageResizer', 'image2byte', 'unpermute_image',$/;"	v
__all__	nbdoc.py	/^__all__ = []$/;"	v
__all__	notebook/core.py	/^__all__ = ['in_ipython', 'IN_IPYTHON', 'in_colab', 'IN_COLAB', 'in_notebook', 'IN_NOTEBOOK']$/;"	v
__all__	notebook/export.py	/^__all__ = ['read_nb', 'check_re', 'is_export', 'find_default_export', 'export_names', 'extra_add', 'notebook2script',$/;"	v
__all__	notebook/export2html.py	/^__all__ = ['remove_widget_state', 'hide_cells', 'clean_exports', 'treat_backticks', 'convert_links', 'add_jekyll_notes',$/;"	v
__all__	notebook/showdoc.py	/^__all__ = ['is_enum', 'add_pytorch_index', 'is_fastai_module', 'FASTAI_DOCS', 'doc_link', 'add_doc_links',$/;"	v
__all__	optimizer.py	/^__all__ = ['Optimizer', 'sgd_step', 'weight_decay', 'l2_reg', 'StatefulOptimizer', 'average_grad', 'average_sqr_grad',$/;"	v
__all__	test.py	/^__all__ = ['test_fail', 'test', 'nequals', 'test_eq', 'test_ne', 'is_close', 'test_close', 'test_is', 'test_stdout']$/;"	v
__all__	vision/core.py	/^__all__ = ['Image', 'Imagify', 'ImageConverter', 'image_resize', 'ImageResizer', 'image2byte', 'unpermute_image',$/;"	v
__call__	data/pipeline.py	/^    def __call__(self, b, filt=None, **kwargs): return self._apply(self.encodes, b, filt, **kwargs)$/;"	m	class:Transform	file:
__call__	data/pipeline.py	/^    def __call__(self, o, *args, **kwargs):$/;"	m	class:TfmOver	file:
__call__	data/pipeline.py	/^    def __call__(self, x, **kwargs): return self.composed(x, **kwargs)$/;"	m	class:Pipeline	file:
__call__	layers.py	/^    def __call__(self, input, target, **kwargs):$/;"	m	class:FlattenedLoss	file:
__call__	learner.py	/^    def __call__(self, event_name): getattr(self, event_name, noop)()$/;"	m	class:Callback	file:
__call__	learner.py	/^    def __call__(self, event_name):$/;"	m	class:Learner	file:
__call__	learner.py	/^    def __call__(self, event_name):$/;"	m	class:VerboseCallback	file:
__call__	local/data/pipeline.py	/^    def __call__(self, b, filt=None, **kwargs): return self._apply(self.encodes, b, filt, **kwargs)$/;"	m	class:Transform	file:
__call__	local/data/pipeline.py	/^    def __call__(self, o, *args, **kwargs):$/;"	m	class:TfmOver	file:
__call__	local/data/pipeline.py	/^    def __call__(self, x, **kwargs): return self.composed(x, **kwargs)$/;"	m	class:Pipeline	file:
__call__	local/layers.py	/^    def __call__(self, input, target, **kwargs):$/;"	m	class:FlattenedLoss	file:
__call__	local/learner.py	/^    def __call__(self, event_name): getattr(self, event_name, noop)()$/;"	m	class:Callback	file:
__call__	local/learner.py	/^    def __call__(self, event_name):$/;"	m	class:Learner	file:
__call__	local/learner.py	/^    def __call__(self, event_name):$/;"	m	class:VerboseCallback	file:
__delitem__	core.py	/^    def __delitem__(self, i): del(self.items[i])$/;"	m	class:L	file:
__delitem__	local/core.py	/^    def __delitem__(self, i): del(self.items[i])$/;"	m	class:L	file:
__dir__	core.py	/^    def __dir__(self): return custom_dir(self, self._xtra)$/;"	m	class:GetAttr	file:
__dir__	local/core.py	/^    def __dir__(self): return custom_dir(self, self._xtra)$/;"	m	class:GetAttr	file:
__eq__	core.py	/^    def __eq__(self,b): return all_equal(b,self)$/;"	m	class:L	file:
__eq__	data/pipeline.py	/^    def __eq__(self, b): return all_equal(self, b)$/;"	m	class:TfmdList	file:
__eq__	data/source.py	/^    def __eq__(self,b): return all_equal(b,self)$/;"	m	class:DsrcSubset	file:
__eq__	local/core.py	/^    def __eq__(self,b): return all_equal(b,self)$/;"	m	class:L	file:
__eq__	local/data/pipeline.py	/^    def __eq__(self, b): return all_equal(self, b)$/;"	m	class:TfmdList	file:
__eq__	local/data/source.py	/^    def __eq__(self,b): return all_equal(b,self)$/;"	m	class:DsrcSubset	file:
__getattr__	core.py	/^    def __getattr__(self,k):$/;"	m	class:GetAttr	file:
__getattr__	learner.py	/^    def __getattr__(self, k): return getattr(self.learn, k)$/;"	m	class:Callback	file:
__getattr__	local/core.py	/^    def __getattr__(self,k):$/;"	m	class:GetAttr	file:
__getattr__	local/learner.py	/^    def __getattr__(self, k): return getattr(self.learn, k)$/;"	m	class:Callback	file:
__getitem__	core.py	/^    def __getitem__(self, idx):$/;"	m	class:L	file:
__getitem__	data/core.py	/^    def __getitem__(self, i): return self.dls[i]$/;"	m	class:DataBunch	file:
__getitem__	data/pipeline.py	/^    def __getitem__(self, i):$/;"	m	class:TfmdList	file:
__getitem__	data/pipeline.py	/^    def __getitem__(self, x): return self(x) # So it can be used as a `Dataset`$/;"	m	class:Transform	file:
__getitem__	data/pipeline.py	/^    def __getitem__(self, x): return self(x)$/;"	m	class:Pipeline	file:
__getitem__	data/source.py	/^    def __getitem__(self, i):$/;"	m	class:DataSource	file:
__getitem__	data/source.py	/^    def __getitem__(self,i): return self.dsrc[self.filts[i]]$/;"	m	class:DsrcSubset	file:
__getitem__	layers.py	/^    def __getitem__(self,i): return self.layers[i]$/;"	m	class:SequentialEx	file:
__getitem__	local/core.py	/^    def __getitem__(self, idx):$/;"	m	class:L	file:
__getitem__	local/data/core.py	/^    def __getitem__(self, i): return self.dls[i]$/;"	m	class:DataBunch	file:
__getitem__	local/data/pipeline.py	/^    def __getitem__(self, i):$/;"	m	class:TfmdList	file:
__getitem__	local/data/pipeline.py	/^    def __getitem__(self, x): return self(x) # So it can be used as a `Dataset`$/;"	m	class:Transform	file:
__getitem__	local/data/pipeline.py	/^    def __getitem__(self, x): return self(x)$/;"	m	class:Pipeline	file:
__getitem__	local/data/source.py	/^    def __getitem__(self, i):$/;"	m	class:DataSource	file:
__getitem__	local/data/source.py	/^    def __getitem__(self,i): return self.dsrc[self.filts[i]]$/;"	m	class:DsrcSubset	file:
__getitem__	local/layers.py	/^    def __getitem__(self,i): return self.layers[i]$/;"	m	class:SequentialEx	file:
__init__	core.py	/^    def __init__(self, items=None, *rest, use_list=False, match=None):$/;"	m	class:L
__init__	data/core.py	/^    def __init__(self, **kwargs): self.kw = kwargs$/;"	m	class:ImageItem
__init__	data/core.py	/^    def __init__(self, **kwargs): self.kw = kwargs$/;"	m	class:TitledImageItem
__init__	data/core.py	/^    def __init__(self, *dls): self.dls,self.default = dls,dls[0]$/;"	m	class:DataBunch
__init__	data/core.py	/^    def __init__(self, dataset, tfms=None, bs=16, is_tuple=True, shuffle=False,$/;"	m	class:TfmdDL
__init__	data/core.py	/^    def __init__(self, div=True, mask=None, is_tuple=None):$/;"	m	class:ByteToFloatTensor
__init__	data/core.py	/^    def __init__(self, mean, std, mask=None, is_tuple=None):$/;"	m	class:Normalize
__init__	data/core.py	/^    def __init__(self, vocab=None, train_attr="train", subset_idx=None, mask=None, is_tuple=None):$/;"	m	class:Categorize
__init__	data/core.py	/^    def __init__(self,device=defaults.device):$/;"	m	class:Cuda
__init__	data/pipeline.py	/^    def __init__(self, encodes=None, mask=None, is_tuple=None, **kwargs):$/;"	m	class:Transform
__init__	data/pipeline.py	/^    def __init__(self, items, tfm, do_setup=True):$/;"	m	class:TfmdList
__init__	data/pipeline.py	/^    def __init__(self, tfms=None): self.tfms,self._tfms = [],L(tfms).mapped(Transform.create)$/;"	m	class:Pipeline
__init__	data/pipeline.py	/^    def __init__(self, tfms=None):$/;"	m	class:TfmOver
__init__	data/source.py	/^    def __init__(self, dsrc, filt): self.dsrc,self.filt,self.filts = dsrc,filt,dsrc.filts[filt]$/;"	m	class:DsrcSubset
__init__	data/source.py	/^    def __init__(self, items, tfm=noop, filts=None, do_setup=True):$/;"	m	class:DataSource
__init__	data/source.py	/^    def __init__(self,f): self.f=f$/;"	m	class:LambdaItem
__init__	layers.py	/^    def __init__(self): super().__init__(nn.AdaptiveAvgPool2d(1), Flatten())$/;"	m	class:PoolFlatten
__init__	layers.py	/^    def __init__(self, *layers):$/;"	m	class:SequentialEx
__init__	layers.py	/^    def __init__(self, *size):$/;"	m	class:ResizeBatch
__init__	layers.py	/^    def __init__(self, *size):$/;"	m	class:View
__init__	layers.py	/^    def __init__(self, dense:bool=False):$/;"	m	class:MergeLayer
__init__	layers.py	/^    def __init__(self, expansion, ni, nh, stride=1, norm_type=NormType.Batch, **kwargs):$/;"	m	class:ResBlock
__init__	layers.py	/^    def __init__(self, filters, kernel_szs=None, strides=None, bn=True):$/;"	m	class:SimpleCNN
__init__	layers.py	/^    def __init__(self, full=False):$/;"	m	class:Flatten
__init__	layers.py	/^    def __init__(self, func):$/;"	m	class:Lambda
__init__	layers.py	/^    def __init__(self, func, **kwargs):$/;"	m	class:PartialLayer
__init__	layers.py	/^    def __init__(self, loss_cls, *args, axis=-1, floatify=False, is_2d=True, **kwargs):$/;"	m	class:FlattenedLoss
__init__	layers.py	/^    def __init__(self, low, high):$/;"	m	class:SigmoidRange
__init__	layers.py	/^    def __init__(self, n_channels):$/;"	m	class:PooledSelfAttention2d
__init__	layers.py	/^    def __init__(self, n_channels):$/;"	m	class:SelfAttention
__init__	layers.py	/^    def __init__(self, n_in, n_out, bn=True, p=0., act=None):$/;"	m	class:BnDropLin
__init__	layers.py	/^    def __init__(self, ni, nf):$/;"	m	class:Embedding
__init__	layers.py	/^    def __init__(self, ni, nf, ks=3, stride=1, padding=None, bias=None, ndim=2, norm_type=NormType.Batch,$/;"	m	class:ConvLayer
__init__	layers.py	/^    def __init__(self, ni, nf=None, scale=2, blur=False, norm_type=NormType.Weight, act_cls=defaults.activation):$/;"	m	class:PixelShuffle_ICNR
__init__	layers.py	/^    def __init__(self, size=None):$/;"	m	class:AdaptiveConcatPool2d
__init__	learner.py	/^    def __init__(self, add_time=True, train_metrics=False, beta=0.98):$/;"	m	class:Recorder
__init__	learner.py	/^    def __init__(self, beta=0.98): self.beta = beta$/;"	m	class:AvgSmoothLoss
__init__	learner.py	/^    def __init__(self, func):  self.func = func$/;"	m	class:AvgMetric
__init__	learner.py	/^    def __init__(self, model, data, loss_func, opt_func=SGD, lr=1e-2, splitter=trainable_params,$/;"	m	class:Learner
__init__	learner.py	/^    def __init__(self, with_loss=False): self.with_loss = with_loss$/;"	m	class:GatherPredsCallback
__init__	local/core.py	/^    def __init__(self, items=None, *rest, use_list=False, match=None):$/;"	m	class:L
__init__	local/data/core.py	/^    def __init__(self, **kwargs): self.kw = kwargs$/;"	m	class:ImageItem
__init__	local/data/core.py	/^    def __init__(self, **kwargs): self.kw = kwargs$/;"	m	class:TitledImageItem
__init__	local/data/core.py	/^    def __init__(self, *dls): self.dls,self.default = dls,dls[0]$/;"	m	class:DataBunch
__init__	local/data/core.py	/^    def __init__(self, dataset, tfms=None, bs=16, is_tuple=True, shuffle=False,$/;"	m	class:TfmdDL
__init__	local/data/core.py	/^    def __init__(self, div=True, mask=None, is_tuple=None):$/;"	m	class:ByteToFloatTensor
__init__	local/data/core.py	/^    def __init__(self, mean, std, mask=None, is_tuple=None):$/;"	m	class:Normalize
__init__	local/data/core.py	/^    def __init__(self, vocab=None, train_attr="train", subset_idx=None, mask=None, is_tuple=None):$/;"	m	class:Categorize
__init__	local/data/core.py	/^    def __init__(self,device=defaults.device):$/;"	m	class:Cuda
__init__	local/data/pipeline.py	/^    def __init__(self, encodes=None, mask=None, is_tuple=None, **kwargs):$/;"	m	class:Transform
__init__	local/data/pipeline.py	/^    def __init__(self, items, tfm, do_setup=True):$/;"	m	class:TfmdList
__init__	local/data/pipeline.py	/^    def __init__(self, tfms=None): self.tfms,self._tfms = [],L(tfms).mapped(Transform.create)$/;"	m	class:Pipeline
__init__	local/data/pipeline.py	/^    def __init__(self, tfms=None):$/;"	m	class:TfmOver
__init__	local/data/source.py	/^    def __init__(self, dsrc, filt): self.dsrc,self.filt,self.filts = dsrc,filt,dsrc.filts[filt]$/;"	m	class:DsrcSubset
__init__	local/data/source.py	/^    def __init__(self, items, tfm=noop, filts=None, do_setup=True):$/;"	m	class:DataSource
__init__	local/data/source.py	/^    def __init__(self,f): self.f=f$/;"	m	class:LambdaItem
__init__	local/layers.py	/^    def __init__(self): super().__init__(nn.AdaptiveAvgPool2d(1), Flatten())$/;"	m	class:PoolFlatten
__init__	local/layers.py	/^    def __init__(self, *layers):$/;"	m	class:SequentialEx
__init__	local/layers.py	/^    def __init__(self, *size):$/;"	m	class:ResizeBatch
__init__	local/layers.py	/^    def __init__(self, *size):$/;"	m	class:View
__init__	local/layers.py	/^    def __init__(self, dense:bool=False):$/;"	m	class:MergeLayer
__init__	local/layers.py	/^    def __init__(self, expansion, ni, nh, stride=1, norm_type=NormType.Batch, **kwargs):$/;"	m	class:ResBlock
__init__	local/layers.py	/^    def __init__(self, filters, kernel_szs=None, strides=None, bn=True):$/;"	m	class:SimpleCNN
__init__	local/layers.py	/^    def __init__(self, full=False):$/;"	m	class:Flatten
__init__	local/layers.py	/^    def __init__(self, func):$/;"	m	class:Lambda
__init__	local/layers.py	/^    def __init__(self, func, **kwargs):$/;"	m	class:PartialLayer
__init__	local/layers.py	/^    def __init__(self, loss_cls, *args, axis=-1, floatify=False, is_2d=True, **kwargs):$/;"	m	class:FlattenedLoss
__init__	local/layers.py	/^    def __init__(self, low, high):$/;"	m	class:SigmoidRange
__init__	local/layers.py	/^    def __init__(self, n_channels):$/;"	m	class:PooledSelfAttention2d
__init__	local/layers.py	/^    def __init__(self, n_channels):$/;"	m	class:SelfAttention
__init__	local/layers.py	/^    def __init__(self, n_in, n_out, bn=True, p=0., act=None):$/;"	m	class:BnDropLin
__init__	local/layers.py	/^    def __init__(self, ni, nf):$/;"	m	class:Embedding
__init__	local/layers.py	/^    def __init__(self, ni, nf, ks=3, stride=1, padding=None, bias=None, ndim=2, norm_type=NormType.Batch,$/;"	m	class:ConvLayer
__init__	local/layers.py	/^    def __init__(self, ni, nf=None, scale=2, blur=False, norm_type=NormType.Weight, act_cls=defaults.activation):$/;"	m	class:PixelShuffle_ICNR
__init__	local/layers.py	/^    def __init__(self, size=None):$/;"	m	class:AdaptiveConcatPool2d
__init__	local/learner.py	/^    def __init__(self, add_time=True, train_metrics=False, beta=0.98):$/;"	m	class:Recorder
__init__	local/learner.py	/^    def __init__(self, beta=0.98): self.beta = beta$/;"	m	class:AvgSmoothLoss
__init__	local/learner.py	/^    def __init__(self, func):  self.func = func$/;"	m	class:AvgMetric
__init__	local/learner.py	/^    def __init__(self, model, data, loss_func, opt_func=SGD, lr=1e-2, splitter=trainable_params,$/;"	m	class:Learner
__init__	local/learner.py	/^    def __init__(self, with_loss=False): self.with_loss = with_loss$/;"	m	class:GatherPredsCallback
__init__	local/optimizer.py	/^    def __init__(self, params, steppers, **defaults):$/;"	m	class:Optimizer
__init__	local/optimizer.py	/^    def __init__(self, params, steppers, stats=None, **defaults):$/;"	m	class:StatefulOptimizer
__init__	local/vision/core.py	/^    def __init__(self, func=Image.open, **kwargs): self.func,self.assoc = func,ImageItem(**kwargs)$/;"	m	class:Imagify
__init__	local/vision/core.py	/^    def __init__(self, mode='RGB', mask=None, is_tuple=None):$/;"	m	class:ImageConverter
__init__	local/vision/core.py	/^    def __init__(self, size, resample=Image.BILINEAR, mask=None, is_tuple=None):$/;"	m	class:ImageResizer
__init__	optimizer.py	/^    def __init__(self, params, steppers, **defaults):$/;"	m	class:Optimizer
__init__	optimizer.py	/^    def __init__(self, params, steppers, stats=None, **defaults):$/;"	m	class:StatefulOptimizer
__init__	vision/core.py	/^    def __init__(self, func=Image.open, **kwargs): self.func,self.assoc = func,ImageItem(**kwargs)$/;"	m	class:Imagify
__init__	vision/core.py	/^    def __init__(self, mode='RGB', mask=None, is_tuple=None):$/;"	m	class:ImageConverter
__init__	vision/core.py	/^    def __init__(self, size, resample=Image.BILINEAR, mask=None, is_tuple=None):$/;"	m	class:ImageResizer
__iter__	core.py	/^    def __iter__(self): return (self[i] for i in range(len(self)))$/;"	m	class:L	file:
__iter__	data/core.py	/^    def __iter__(self): return map(self.tfm, self.dl)$/;"	m	class:TfmdDL	file:
__iter__	data/pipeline.py	/^    def __iter__(self): return (self[i] for i in range_of(self))$/;"	m	class:TfmdList	file:
__iter__	local/core.py	/^    def __iter__(self): return (self[i] for i in range(len(self)))$/;"	m	class:L	file:
__iter__	local/data/core.py	/^    def __iter__(self): return map(self.tfm, self.dl)$/;"	m	class:TfmdDL	file:
__iter__	local/data/pipeline.py	/^    def __iter__(self): return (self[i] for i in range_of(self))$/;"	m	class:TfmdList	file:
__len__	core.py	/^    def __len__(self): return len(self.items)$/;"	m	class:L	file:
__len__	data/core.py	/^    def __len__(self): return len(self.dl)$/;"	m	class:TfmdDL	file:
__len__	data/pipeline.py	/^    def __len__(self): return len(self.items)$/;"	m	class:TfmdList	file:
__len__	data/source.py	/^    def __len__(self): return len(self.filts)$/;"	m	class:DsrcSubset	file:
__len__	local/core.py	/^    def __len__(self): return len(self.items)$/;"	m	class:L	file:
__len__	local/data/core.py	/^    def __len__(self): return len(self.dl)$/;"	m	class:TfmdDL	file:
__len__	local/data/pipeline.py	/^    def __len__(self): return len(self.items)$/;"	m	class:TfmdList	file:
__len__	local/data/source.py	/^    def __len__(self): return len(self.filts)$/;"	m	class:DsrcSubset	file:
__mul__	core.py	/^    def __mul__ (a,b): return L(a.items*b)$/;"	m	class:L	file:
__mul__	local/core.py	/^    def __mul__ (a,b): return L(a.items*b)$/;"	m	class:L	file:
__radd__	core.py	/^    def __radd__(a,b): return L(b)+a$/;"	m	class:L	file:
__radd__	local/core.py	/^    def __radd__(a,b): return L(b)+a$/;"	m	class:L	file:
__repr__	core.py	/^    def __repr__(self): return f'{coll_repr(self)}'$/;"	m	class:L	file:
__repr__	data/pipeline.py	/^    def __repr__(self): return f"{self.__class__.__name__}: {self.items}\\ntfms - {self.tfm}"$/;"	m	class:TfmdList	file:
__repr__	data/pipeline.py	/^    def __repr__(self): return f'TfmOver({self.tfms})'$/;"	m	class:TfmOver	file:
__repr__	data/pipeline.py	/^    def __repr__(self): return str(self.encodes) if self.__class__==Transform else str(self.__class__)$/;"	m	class:Transform	file:
__repr__	data/pipeline.py	/^    def __repr__(self): return str(self.tfms)$/;"	m	class:Pipeline	file:
__repr__	data/source.py	/^    def __repr__(self): return '\\n'.join(map(str,self.subsets())) + f'\\ntfm - {self.tfm}'$/;"	m	class:DataSource	file:
__repr__	data/source.py	/^    def __repr__(self): return coll_repr(self)$/;"	m	class:DsrcSubset	file:
__repr__	layers.py	/^    def __repr__(self): return f"FlattenedLoss of {self.func}"$/;"	m	class:FlattenedLoss	file:
__repr__	layers.py	/^    def __repr__(self): return f'{self.__class__.__name__}({self.func})'$/;"	m	class:Lambda	file:
__repr__	layers.py	/^    def __repr__(self): return f'{self.__class__.__name__}({self.repr})'$/;"	m	class:PartialLayer	file:
__repr__	local/core.py	/^    def __repr__(self): return f'{coll_repr(self)}'$/;"	m	class:L	file:
__repr__	local/data/pipeline.py	/^    def __repr__(self): return f"{self.__class__.__name__}: {self.items}\\ntfms - {self.tfm}"$/;"	m	class:TfmdList	file:
__repr__	local/data/pipeline.py	/^    def __repr__(self): return f'TfmOver({self.tfms})'$/;"	m	class:TfmOver	file:
__repr__	local/data/pipeline.py	/^    def __repr__(self): return str(self.encodes) if self.__class__==Transform else str(self.__class__)$/;"	m	class:Transform	file:
__repr__	local/data/pipeline.py	/^    def __repr__(self): return str(self.tfms)$/;"	m	class:Pipeline	file:
__repr__	local/data/source.py	/^    def __repr__(self): return '\\n'.join(map(str,self.subsets())) + f'\\ntfm - {self.tfm}'$/;"	m	class:DataSource	file:
__repr__	local/data/source.py	/^    def __repr__(self): return coll_repr(self)$/;"	m	class:DsrcSubset	file:
__repr__	local/layers.py	/^    def __repr__(self): return f"FlattenedLoss of {self.func}"$/;"	m	class:FlattenedLoss	file:
__repr__	local/layers.py	/^    def __repr__(self): return f'{self.__class__.__name__}({self.func})'$/;"	m	class:Lambda	file:
__repr__	local/layers.py	/^    def __repr__(self): return f'{self.__class__.__name__}({self.repr})'$/;"	m	class:PartialLayer	file:
__setitem__	core.py	/^    def __setitem__(self, idx, o):$/;"	m	class:L	file:
__setitem__	local/core.py	/^    def __setitem__(self, idx, o):$/;"	m	class:L	file:
_add2add	local/notebook/export.py	/^def _add2add(fname, names, line_width=120):$/;"	f
_add2add	notebook/export.py	/^def _add2add(fname, names, line_width=120):$/;"	f
_add_check	data/external.py	/^def _add_check(url, fname):$/;"	f
_add_check	local/data/external.py	/^def _add_check(url, fname):$/;"	f
_apply	data/pipeline.py	/^    def _apply(self, f, b, filt, **kwargs):$/;"	m	class:Transform
_apply	local/data/pipeline.py	/^    def _apply(self, f, b, filt, **kwargs):$/;"	m	class:Transform
_arg_prefixes	local/notebook/showdoc.py	/^_arg_prefixes = {inspect._VAR_POSITIONAL: '\\*', inspect._VAR_KEYWORD:'\\*\\*'}$/;"	v
_arg_prefixes	notebook/showdoc.py	/^_arg_prefixes = {inspect._VAR_POSITIONAL: '\\*', inspect._VAR_KEYWORD:'\\*\\*'}$/;"	v
_call_one	learner.py	/^    def _call_one(self, event_name):$/;"	m	class:Learner
_call_one	local/learner.py	/^    def _call_one(self, event_name):$/;"	m	class:Learner
_camel_re1	core.py	/^_camel_re1 = re.compile('(.)([A-Z][a-z]+)')$/;"	v
_camel_re1	local/core.py	/^_camel_re1 = re.compile('(.)([A-Z][a-z]+)')$/;"	v
_camel_re2	core.py	/^_camel_re2 = re.compile('([a-z0-9])([A-Z])')$/;"	v
_camel_re2	local/core.py	/^_camel_re2 = re.compile('([a-z0-9])([A-Z])')$/;"	v
_check_file	data/external.py	/^def _check_file(fname):$/;"	f
_check_file	local/data/external.py	/^def _check_file(fname):$/;"	f
_conv	layers.py	/^    def _conv(self,n_in,n_out):$/;"	m	class:PooledSelfAttention2d
_conv	layers.py	/^    def _conv(self,n_in,n_out):$/;"	m	class:SelfAttention
_conv	local/layers.py	/^    def _conv(self,n_in,n_out):$/;"	m	class:PooledSelfAttention2d
_conv	local/layers.py	/^    def _conv(self,n_in,n_out):$/;"	m	class:SelfAttention
_conv_func	layers.py	/^def _conv_func(ndim=2, transpose=False):$/;"	f
_conv_func	local/layers.py	/^def _conv_func(ndim=2, transpose=False):$/;"	f
_create_mod_file	local/notebook/export.py	/^def _create_mod_file(fname, nb_path):$/;"	f
_create_mod_file	notebook/export.py	/^def _create_mod_file(fname, nb_path):$/;"	f
_deal_import	local/notebook/export.py	/^def _deal_import(code_lines, fname):$/;"	f
_deal_import	notebook/export.py	/^def _deal_import(code_lines, fname):$/;"	f
_debias	local/optimizer.py	/^def _debias(mom, damp, step): return damp * (1 - mom**step) \/ (1-mom)$/;"	f
_debias	optimizer.py	/^def _debias(mom, damp, step): return damp * (1 - mom**step) \/ (1-mom)$/;"	f
_docs	data/core.py	/^    _docs = dict(decode="Decode `b` using `ds_tfm` and `tfm`",$/;"	v	class:TfmdDL
_docs	data/core.py	/^    _docs=dict(__getitem__="Retrieve `DataLoader` at `i` (`0` is training, `1` is validation)",$/;"	v	class:DataBunch
_docs	data/core.py	/^    _docs=dict(encodes="Convert items matching `mask` to float and optionally divide by 255",$/;"	v	class:ByteToFloatTensor
_docs	data/core.py	/^    _docs=dict(encodes="Move batch to `device`", decodes="Return batch to CPU")$/;"	v	class:Cuda
_docs	data/core.py	/^    _docs=dict(encodes="Normalize batch matching `mask`", decodes="Denormalize batch matching `mask`")$/;"	v	class:Normalize
_docs	data/pipeline.py	/^    _docs = dict(setup="Transform setup with self",$/;"	v	class:TfmdList
_docs	data/source.py	/^    _docs = dict(decode="Transform decode",$/;"	v	class:DsrcSubset
_docs	data/source.py	/^    _docs = dict(len="`len` of subset `filt`",$/;"	v	class:DataSource
_docs	learner.py	/^    _docs = {"begin_train": "Reset loss and metrics state",$/;"	v	class:Recorder
_docs	learner.py	/^    _docs = {'reset': "Reset inner state to prepare for new computation",$/;"	v	class:Metric
_docs	learner.py	/^    _docs=dict(__call__="Call `self.{event_name}` if it's defined",$/;"	v	class:Callback
_docs	local/data/core.py	/^    _docs = dict(decode="Decode `b` using `ds_tfm` and `tfm`",$/;"	v	class:TfmdDL
_docs	local/data/core.py	/^    _docs=dict(__getitem__="Retrieve `DataLoader` at `i` (`0` is training, `1` is validation)",$/;"	v	class:DataBunch
_docs	local/data/core.py	/^    _docs=dict(encodes="Convert items matching `mask` to float and optionally divide by 255",$/;"	v	class:ByteToFloatTensor
_docs	local/data/core.py	/^    _docs=dict(encodes="Move batch to `device`", decodes="Return batch to CPU")$/;"	v	class:Cuda
_docs	local/data/core.py	/^    _docs=dict(encodes="Normalize batch matching `mask`", decodes="Denormalize batch matching `mask`")$/;"	v	class:Normalize
_docs	local/data/pipeline.py	/^    _docs = dict(setup="Transform setup with self",$/;"	v	class:TfmdList
_docs	local/data/source.py	/^    _docs = dict(decode="Transform decode",$/;"	v	class:DsrcSubset
_docs	local/data/source.py	/^    _docs = dict(len="`len` of subset `filt`",$/;"	v	class:DataSource
_docs	local/learner.py	/^    _docs = {"begin_train": "Reset loss and metrics state",$/;"	v	class:Recorder
_docs	local/learner.py	/^    _docs = {'reset': "Reset inner state to prepare for new computation",$/;"	v	class:Metric
_docs	local/learner.py	/^    _docs=dict(__call__="Call `self.{event_name}` if it's defined",$/;"	v	class:Callback
_escape_chars	local/notebook/showdoc.py	/^def _escape_chars(s):$/;"	f
_escape_chars	notebook/showdoc.py	/^def _escape_chars(s):$/;"	f
_exporter	local/notebook/export2html.py	/^def _exporter():$/;"	f
_exporter	notebook/export2html.py	/^def _exporter():$/;"	f
_filt_match	data/pipeline.py	/^    def _filt_match(self, filt): return self.filt is None or self.filt==filt$/;"	m	class:Transform
_filt_match	local/data/pipeline.py	/^    def _filt_match(self, filt): return self.filt is None or self.filt==filt$/;"	m	class:Transform
_find_file	local/notebook/export2html.py	/^def _find_file(cells):$/;"	f
_find_file	notebook/export2html.py	/^def _find_file(cells):$/;"	f
_format_cls_doc	local/notebook/showdoc.py	/^def _format_cls_doc(cls, full_name):$/;"	f
_format_cls_doc	notebook/showdoc.py	/^def _format_cls_doc(cls, full_name):$/;"	f
_format_enum_doc	local/notebook/showdoc.py	/^def _format_enum_doc(enum, full_name):$/;"	f
_format_enum_doc	notebook/showdoc.py	/^def _format_enum_doc(enum, full_name):$/;"	f
_format_func_doc	local/notebook/showdoc.py	/^def _format_func_doc(func, full_name=None):$/;"	f
_format_func_doc	notebook/showdoc.py	/^def _format_func_doc(func, full_name=None):$/;"	f
_get_check	data/external.py	/^def _get_check(url):$/;"	f
_get_check	local/data/external.py	/^def _get_check(url):$/;"	f
_get_config	data/external.py	/^def _get_config():$/;"	f
_get_config	local/data/external.py	/^def _get_config():$/;"	f
_get_files	data/core.py	/^def _get_files(p, fs, extensions=None):$/;"	f
_get_files	local/data/core.py	/^def _get_files(p, fs, extensions=None):$/;"	f
_get_index	local/notebook/export.py	/^def _get_index():$/;"	f
_get_index	notebook/export.py	/^def _get_index():$/;"	f
_get_pytorch_index	local/notebook/showdoc.py	/^def _get_pytorch_index():$/;"	f
_get_pytorch_index	notebook/showdoc.py	/^def _get_pytorch_index():$/;"	f
_get_sorted_files	local/notebook/export.py	/^def _get_sorted_files(all_fs: Union[bool,str], up_to=None):$/;"	f
_get_sorted_files	notebook/export.py	/^def _get_sorted_files(all_fs: Union[bool,str], up_to=None):$/;"	f
_grandparent_idxs	data/core.py	/^def _grandparent_idxs(items, name): return mask2idxs(Path(o).parent.parent.name == name for o in items)$/;"	f
_grandparent_idxs	local/data/core.py	/^def _grandparent_idxs(items, name): return mask2idxs(Path(o).parent.parent.name == name for o in items)$/;"	f
_import_show_doc_cell	local/notebook/export2html.py	/^def _import_show_doc_cell(name=None):$/;"	f
_import_show_doc_cell	notebook/export2html.py	/^def _import_show_doc_cell(name=None):$/;"	f
_init_state	local/optimizer.py	/^    def _init_state(self, p):$/;"	m	class:StatefulOptimizer
_init_state	optimizer.py	/^    def _init_state(self, p):$/;"	m	class:StatefulOptimizer
_inner	core.py	/^    def _inner(o): return o.to(device, non_blocking=True) if isinstance(o,Tensor) else o$/;"	f	function:to_device
_inner	core.py	/^    def _inner(x, *args, **kwargs):$/;"	f	function:compose
_inner	core.py	/^    def _inner(x, cpu=True):$/;"	f	function:to_detach
_inner	data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:GrandparentSplitter
_inner	data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:RandomSplitter
_inner	data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:RegexLabeller
_inner	data/core.py	/^    def _inner(o, extensions=extensions, recurse=recurse, include=include): return get_files(o\/suf, extensions, recurse, include)$/;"	f	function:FileGetter
_inner	data/core.py	/^    def _inner(o, recurse=recurse, include=include): return get_image_files(o\/suf, recurse, include)$/;"	f	function:ImageGetter
_inner	local/core.py	/^    def _inner(o): return o.to(device, non_blocking=True) if isinstance(o,Tensor) else o$/;"	f	function:to_device
_inner	local/core.py	/^    def _inner(x, *args, **kwargs):$/;"	f	function:compose
_inner	local/core.py	/^    def _inner(x, cpu=True):$/;"	f	function:to_detach
_inner	local/data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:GrandparentSplitter
_inner	local/data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:RandomSplitter
_inner	local/data/core.py	/^    def _inner(o, **kwargs):$/;"	f	function:RegexLabeller
_inner	local/data/core.py	/^    def _inner(o, extensions=extensions, recurse=recurse, include=include): return get_files(o\/suf, extensions, recurse, include)$/;"	f	function:FileGetter
_inner	local/data/core.py	/^    def _inner(o, recurse=recurse, include=include): return get_image_files(o\/suf, recurse, include)$/;"	f	function:ImageGetter
_inner	local/notebook/export2html.py	/^    def _inner(m):$/;"	f	function:add_jekyll_notes
_inner	notebook/export2html.py	/^    def _inner(m):$/;"	f	function:add_jekyll_notes
_inner_init	core.py	/^    def _inner_init(self, *args, **kwargs):$/;"	f	function:newchk
_inner_init	local/core.py	/^    def _inner_init(self, *args, **kwargs):$/;"	f	function:newchk
_inner_new	core.py	/^    def _inner_new(cls, x=None, *args, **kwargs):$/;"	f	function:newchk
_inner_new	local/core.py	/^    def _inner_new(cls, x=None, *args, **kwargs):$/;"	f	function:newchk
_is_fastai_class	local/notebook/showdoc.py	/^def _is_fastai_class(ft): return belongs_to_module(ft, 'fastai_source')$/;"	f
_is_fastai_class	notebook/showdoc.py	/^def _is_fastai_class(ft): return belongs_to_module(ft, 'fastai_source')$/;"	f
_learn_get_preds	learner.py	/^def _learn_get_preds(self, ds_idx=1, with_loss=False):$/;"	f
_learn_get_preds	local/learner.py	/^def _learn_get_preds(self, ds_idx=1, with_loss=False):$/;"	f
_learn_loss_not_reduced	learner.py	/^def _learn_loss_not_reduced(self):$/;"	f
_learn_loss_not_reduced	local/learner.py	/^def _learn_loss_not_reduced(self):$/;"	f
_learn_validate	learner.py	/^def _learn_validate(self, dl=None, cbs=None):$/;"	f
_learn_validate	local/learner.py	/^def _learn_validate(self, dl=None, cbs=None):$/;"	f
_learner_no_logging	learner.py	/^def _learner_no_logging(self):$/;"	f
_learner_no_logging	local/learner.py	/^def _learner_no_logging(self):$/;"	f
_listify	core.py	/^def _listify(o):$/;"	f
_listify	local/core.py	/^def _listify(o):$/;"	f
_mask2idxs	core.py	/^def _mask2idxs(mask):$/;"	f
_mask2idxs	local/core.py	/^def _mask2idxs(mask):$/;"	f
_masked	data/pipeline.py	/^    def _masked(self,b):$/;"	m	class:Transform
_masked	local/data/pipeline.py	/^    def _masked(self,b):$/;"	m	class:Transform
_not_private	local/notebook/export.py	/^def _not_private(n):$/;"	f
_not_private	notebook/export.py	/^def _not_private(n):$/;"	f
_notebook2script	local/notebook/export.py	/^def _notebook2script(fname):$/;"	f
_notebook2script	notebook/export.py	/^def _notebook2script(fname):$/;"	f
_relative_import	local/notebook/export.py	/^def _relative_import(name, fname):$/;"	f
_relative_import	notebook/export.py	/^def _relative_import(name, fname):$/;"	f
_relu	layers.py	/^def _relu(inplace=False, leaky=None):$/;"	f
_relu	local/layers.py	/^def _relu(inplace=False, leaky=None):$/;"	f
_replace_link	local/notebook/showdoc.py	/^    def _replace_link(m): return doc_link(m.group(1) or m.group(2))$/;"	f	function:add_doc_links
_replace_link	notebook/showdoc.py	/^    def _replace_link(m): return doc_link(m.group(1) or m.group(2))$/;"	f	function:add_doc_links
_reset_index	local/notebook/export.py	/^def _reset_index():$/;"	f
_reset_index	notebook/export.py	/^def _reset_index():$/;"	f
_save_index	local/notebook/export.py	/^def _save_index(index): json.dump(index, open(Path(__file__).parent\/'index.txt', 'w'), indent=2)$/;"	f
_save_index	notebook/export.py	/^def _save_index(index): json.dump(index, open(Path(__file__).parent\/'index.txt', 'w'), indent=2)$/;"	f
_set_tupled	data/pipeline.py	/^def _set_tupled(tfms, m=True):$/;"	f
_set_tupled	local/data/pipeline.py	/^def _set_tupled(tfms, m=True):$/;"	f
_show_doc_cell	local/notebook/export2html.py	/^def _show_doc_cell(name, cls_lvl=None):$/;"	f
_show_doc_cell	notebook/export2html.py	/^def _show_doc_cell(name, cls_lvl=None):$/;"	f
_strip_fastai	local/notebook/showdoc.py	/^def _strip_fastai(s): return re.sub(r'^local\\.', '', s)$/;"	f
_strip_fastai	notebook/showdoc.py	/^def _strip_fastai(s): return re.sub(r'^local\\.', '', s)$/;"	f
_train_mets	learner.py	/^    def _train_mets(self): return [self.loss] + (self.metrics if self.train_metrics else [])$/;"	m	class:Recorder
_train_mets	local/learner.py	/^    def _train_mets(self): return [self.loss] + (self.metrics if self.train_metrics else [])$/;"	m	class:Recorder
_url2path	data/external.py	/^def _url2path(url, c_key=ConfigKey.Archive):$/;"	f
_url2path	local/data/external.py	/^def _url2path(url, c_key=ConfigKey.Archive):$/;"	f
_valid_mets	learner.py	/^    def _valid_mets(self): return [self.loss] + self.metrics$/;"	m	class:Recorder
_valid_mets	local/learner.py	/^    def _valid_mets(self): return [self.loss] + self.metrics$/;"	m	class:Recorder
_xtra	core.py	/^    _xtra =  [o for o in dir(list) if not o.startswith('_')]$/;"	v	class:L
_xtra	core.py	/^    _xtra=[]$/;"	v	class:GetAttr
_xtra	data/core.py	/^    _xtra = 'batch_size num_workers dataset sampler pin_memory'.split()$/;"	v	class:TfmdDL
_xtra	data/core.py	/^    _xtra = 'one_batch show_batch dataset'.split()$/;"	v	class:DataBunch
_xtra	data/pipeline.py	/^    _xtra = 'decode __call__ show'.split()$/;"	v	class:TfmdList
_xtra	local/core.py	/^    _xtra =  [o for o in dir(list) if not o.startswith('_')]$/;"	v	class:L
_xtra	local/core.py	/^    _xtra=[]$/;"	v	class:GetAttr
_xtra	local/data/core.py	/^    _xtra = 'batch_size num_workers dataset sampler pin_memory'.split()$/;"	v	class:TfmdDL
_xtra	local/data/core.py	/^    _xtra = 'one_batch show_batch dataset'.split()$/;"	v	class:DataBunch
_xtra	local/data/pipeline.py	/^    _xtra = 'decode __call__ show'.split()$/;"	v	class:TfmdList
accumulate	learner.py	/^    def accumulate(self, learn): pass$/;"	m	class:Metric
accumulate	learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgLoss
accumulate	learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgMetric
accumulate	learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgSmoothLoss
accumulate	local/learner.py	/^    def accumulate(self, learn): pass$/;"	m	class:Metric
accumulate	local/learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgLoss
accumulate	local/learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgMetric
accumulate	local/learner.py	/^    def accumulate(self, learn):$/;"	m	class:AvgSmoothLoss
adam_step	local/optimizer.py	/^def adam_step(p, lr, mom, step, sqr_mom, grad_avg, sqr_avg, eps, **kwargs):$/;"	f
adam_step	optimizer.py	/^def adam_step(p, lr, mom, step, sqr_mom, grad_avg, sqr_avg, eps, **kwargs):$/;"	f
add	data/pipeline.py	/^    def add(self, tfms, items=None):$/;"	m	class:Pipeline
add	local/data/pipeline.py	/^    def add(self, tfms, items=None):$/;"	m	class:Pipeline
add_cb	learner.py	/^    def add_cb(self, cb):$/;"	m	class:Learner
add_cb	local/learner.py	/^    def add_cb(self, cb):$/;"	m	class:Learner
add_cbs	learner.py	/^    def add_cbs(self, cbs):$/;"	m	class:Learner
add_cbs	local/learner.py	/^    def add_cbs(self, cbs):$/;"	m	class:Learner
add_doc_links	local/notebook/showdoc.py	/^def add_doc_links(text):$/;"	f
add_doc_links	notebook/showdoc.py	/^def add_doc_links(text):$/;"	f
add_docs	core.py	/^def add_docs(cls, cls_doc=None, **docs):$/;"	f
add_docs	local/core.py	/^def add_docs(cls, cls_doc=None, **docs):$/;"	f
add_jekyll_notes	local/notebook/export2html.py	/^def add_jekyll_notes(cell):$/;"	f
add_jekyll_notes	notebook/export2html.py	/^def add_jekyll_notes(cell):$/;"	f
add_props	core.py	/^def add_props(f, n=2):$/;"	f
add_props	local/core.py	/^def add_props(f, n=2):$/;"	f
add_pytorch_index	local/notebook/showdoc.py	/^def add_pytorch_index(func_name, url):$/;"	f
add_pytorch_index	notebook/showdoc.py	/^def add_pytorch_index(func_name, url):$/;"	f
add_show_docs	local/notebook/export2html.py	/^def add_show_docs(cells, cls_lvl=None):$/;"	f
add_show_docs	notebook/export2html.py	/^def add_show_docs(cells, cls_lvl=None):$/;"	f
added_cbs	learner.py	/^    def added_cbs(self, cbs):$/;"	m	class:Learner
added_cbs	local/learner.py	/^    def added_cbs(self, cbs):$/;"	m	class:Learner
after_batch	learner.py	/^    def after_batch(self):$/;"	m	class:GatherPredsCallback
after_batch	learner.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_batch	learner.py	/^    def after_batch(self):$/;"	m	class:TrainEvalCallback
after_batch	local/learner.py	/^    def after_batch(self):$/;"	m	class:GatherPredsCallback
after_batch	local/learner.py	/^    def after_batch(self):$/;"	m	class:Recorder
after_batch	local/learner.py	/^    def after_batch(self):$/;"	m	class:TrainEvalCallback
after_epoch	learner.py	/^    def after_epoch(self):$/;"	m	class:Recorder
after_epoch	local/learner.py	/^    def after_epoch(self):$/;"	m	class:Recorder
after_train	learner.py	/^    def after_train   (self): self.log += [m.value for m in self._train_mets]$/;"	m	class:Recorder
after_train	local/learner.py	/^    def after_train   (self): self.log += [m.value for m in self._train_mets]$/;"	m	class:Recorder
after_validate	learner.py	/^    def after_validate(self): self.log += [m.value for m in self._valid_mets]$/;"	m	class:Recorder
after_validate	local/learner.py	/^    def after_validate(self): self.log += [m.value for m in self._valid_mets]$/;"	m	class:Recorder
all_batches	learner.py	/^    def all_batches(self):$/;"	m	class:Learner
all_batches	local/learner.py	/^    def all_batches(self):$/;"	m	class:Learner
all_disjoint	core.py	/^def all_disjoint(sets):$/;"	f
all_disjoint	local/core.py	/^def all_disjoint(sets):$/;"	f
all_equal	imports.py	/^def all_equal(a,b):$/;"	f
all_equal	local/imports.py	/^def all_equal(a,b):$/;"	f
all_union	core.py	/^def all_union(sets):$/;"	f
all_union	local/core.py	/^def all_union(sets):$/;"	f
append	layers.py	/^    def append(self,l):      return self.layers.append(l)$/;"	m	class:SequentialEx
append	local/layers.py	/^    def append(self,l):      return self.layers.append(l)$/;"	m	class:SequentialEx
apply	core.py	/^def apply(func, x, *args, **kwargs):$/;"	f
apply	local/core.py	/^def apply(func, x, *args, **kwargs):$/;"	f
array	imports.py	/^from numpy import array,ndarray$/;"	i
array	local/imports.py	/^from numpy import array,ndarray$/;"	i
as_tensor	imports.py	/^from torch import as_tensor,Tensor$/;"	i
as_tensor	local/imports.py	/^from torch import as_tensor,Tensor$/;"	i
attrgetter	imports.py	/^from operator import itemgetter,attrgetter$/;"	i
attrgetter	local/imports.py	/^from operator import itemgetter,attrgetter$/;"	i
attrgot	core.py	/^    def attrgot(self, k):   return self.mapped(lambda o:getattr(o,k,0))$/;"	m	class:L
attrgot	local/core.py	/^    def attrgot(self, k):   return self.mapped(lambda o:getattr(o,k,0))$/;"	m	class:L
average_grad	local/optimizer.py	/^def average_grad(state, p, mom, dampening=False, **kwargs):$/;"	f
average_grad	optimizer.py	/^def average_grad(state, p, mom, dampening=False, **kwargs):$/;"	f
average_sqr_grad	local/optimizer.py	/^def average_sqr_grad(state, p, sqr_mom, dampening=True, **kwargs):$/;"	f
average_sqr_grad	optimizer.py	/^def average_sqr_grad(state, p, sqr_mom, dampening=True, **kwargs):$/;"	f
begin_batch	learner.py	/^    def begin_batch(self):$/;"	m	class:TrainEvalCallback
begin_batch	local/learner.py	/^    def begin_batch(self):$/;"	m	class:TrainEvalCallback
begin_epoch	learner.py	/^    def begin_epoch(self):$/;"	m	class:Recorder
begin_epoch	local/learner.py	/^    def begin_epoch(self):$/;"	m	class:Recorder
begin_fit	learner.py	/^    def begin_fit(self):$/;"	m	class:Recorder
begin_fit	learner.py	/^    def begin_fit(self):$/;"	m	class:TrainEvalCallback
begin_fit	local/learner.py	/^    def begin_fit(self):$/;"	m	class:Recorder
begin_fit	local/learner.py	/^    def begin_fit(self):$/;"	m	class:TrainEvalCallback
begin_train	learner.py	/^    def begin_train   (self): [m.reset() for m in self._train_mets]$/;"	m	class:Recorder
begin_train	learner.py	/^    def begin_train(self):$/;"	m	class:TrainEvalCallback
begin_train	local/learner.py	/^    def begin_train   (self): [m.reset() for m in self._train_mets]$/;"	m	class:Recorder
begin_train	local/learner.py	/^    def begin_train(self):$/;"	m	class:TrainEvalCallback
begin_validate	learner.py	/^    def begin_validate(self): [m.reset() for m in self._valid_mets]$/;"	m	class:Recorder
begin_validate	learner.py	/^    def begin_validate(self):$/;"	m	class:GatherPredsCallback
begin_validate	learner.py	/^    def begin_validate(self):$/;"	m	class:TrainEvalCallback
begin_validate	local/learner.py	/^    def begin_validate(self): [m.reset() for m in self._valid_mets]$/;"	m	class:Recorder
begin_validate	local/learner.py	/^    def begin_validate(self):$/;"	m	class:GatherPredsCallback
begin_validate	local/learner.py	/^    def begin_validate(self):$/;"	m	class:TrainEvalCallback
build	data/source.py	/^    def build(cls, items, tfms=None, filts=None, final_tfms=None):$/;"	m	class:DataSource
build	local/data/source.py	/^    def build(cls, items, tfms=None, filts=None, final_tfms=None):$/;"	m	class:DataSource
camel2snake	core.py	/^def camel2snake(name):$/;"	f
camel2snake	local/core.py	/^def camel2snake(name):$/;"	f
cat	core.py	/^    def cat  (self, dim=0): return torch.cat  (list(self.tensored()), dim=dim)$/;"	m	class:L
cat	local/core.py	/^    def cat  (self, dim=0): return torch.cat  (list(self.tensored()), dim=dim)$/;"	m	class:L
check_re	local/notebook/export.py	/^def check_re(cell, pat):$/;"	f
check_re	notebook/export.py	/^def check_re(cell, pat):$/;"	f
chk	core.py	/^def chk(f): return typechecked(always=True)(f)$/;"	f
chk	local/core.py	/^def chk(f): return typechecked(always=True)(f)$/;"	f
clean_exports	local/notebook/export2html.py	/^def clean_exports(cell):$/;"	f
clean_exports	notebook/export2html.py	/^def clean_exports(cell):$/;"	f
colab	local/notebook/core.py	/^        from google import colab$/;"	i
colab	notebook/core.py	/^        from google import colab$/;"	i
coll_repr	core.py	/^def coll_repr(c, max=1000):$/;"	f
coll_repr	local/core.py	/^def coll_repr(c, max=1000):$/;"	f
compose	core.py	/^def compose(*funcs: Callable, order=None):$/;"	f
compose	local/core.py	/^def compose(*funcs: Callable, order=None):$/;"	f
compose	local/notebook/export2html.py	/^from ..core import compose$/;"	i
compose	notebook/export2html.py	/^from ..core import compose$/;"	i
composed	data/pipeline.py	/^    def composed(self, x, rev=False, fname='__call__', **kwargs):$/;"	m	class:Pipeline
composed	local/data/pipeline.py	/^    def composed(self, x, rev=False, fname='__call__', **kwargs):$/;"	m	class:Pipeline
contextmanager	imports.py	/^from contextlib import redirect_stdout,contextmanager$/;"	i
contextmanager	local/imports.py	/^from contextlib import redirect_stdout,contextmanager$/;"	i
convert_all	local/notebook/export2html.py	/^def convert_all(path='.', dest_path='docs', force_all=False):$/;"	f
convert_all	notebook/export2html.py	/^def convert_all(path='.', dest_path='docs', force_all=False):$/;"	f
convert_links	local/notebook/export2html.py	/^def convert_links(cell):$/;"	f
convert_links	notebook/export2html.py	/^def convert_links(cell):$/;"	f
convert_nb	local/notebook/export2html.py	/^def convert_nb(fname, dest_path='docs'):$/;"	f
convert_nb	notebook/export2html.py	/^def convert_nb(fname, dest_path='docs'):$/;"	f
copy	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
copy	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
copy_images	local/notebook/export2html.py	/^def copy_images(cell, fname, dest):$/;"	f
copy_images	notebook/export2html.py	/^def copy_images(cell, fname, dest):$/;"	f
create	data/pipeline.py	/^    def create(cls, f, filt=None): return f if isinstance(f,Transform) else cls(f)$/;"	m	class:Transform
create	local/data/pipeline.py	/^    def create(cls, f, filt=None): return f if isinstance(f,Transform) else cls(f)$/;"	m	class:Transform
csv	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
csv	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
custom_dir	core.py	/^def custom_dir(c, add:List):$/;"	f
custom_dir	local/core.py	/^def custom_dir(c, add:List):$/;"	f
decode	data/core.py	/^    def decode(self, b): return getattr(self.dataset,'decode_batch',noop)(self.tfm.decode(b))$/;"	m	class:TfmdDL
decode	data/pipeline.py	/^    def decode  (self, b, filt=None, **kwargs): return self._apply(self.decodes, b, filt, **kwargs)$/;"	m	class:Transform
decode	data/pipeline.py	/^    def decode(self, o, **kwargs): return [t.decode(p, **kwargs) for p,t in zip(o,self.tfms)]$/;"	m	class:TfmOver
decode	data/pipeline.py	/^    def decode(self, x, **kwargs): return self.composed(x, rev=True, fname='decode', **kwargs)$/;"	m	class:Pipeline
decode	data/source.py	/^    def decode(self, o, **kwargs): return self.dsrc.decode(o, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
decode	local/data/core.py	/^    def decode(self, b): return getattr(self.dataset,'decode_batch',noop)(self.tfm.decode(b))$/;"	m	class:TfmdDL
decode	local/data/pipeline.py	/^    def decode  (self, b, filt=None, **kwargs): return self._apply(self.decodes, b, filt, **kwargs)$/;"	m	class:Transform
decode	local/data/pipeline.py	/^    def decode(self, o, **kwargs): return [t.decode(p, **kwargs) for p,t in zip(o,self.tfms)]$/;"	m	class:TfmOver
decode	local/data/pipeline.py	/^    def decode(self, x, **kwargs): return self.composed(x, rev=True, fname='decode', **kwargs)$/;"	m	class:Pipeline
decode	local/data/source.py	/^    def decode(self, o, **kwargs): return self.dsrc.decode(o, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
decode_at	data/pipeline.py	/^    def decode_at(self, idx): return self.decode(self[idx])$/;"	m	class:Pipeline
decode_at	data/pipeline.py	/^    def decode_at(self, idx): return self.decode(self[idx])$/;"	m	class:TfmdList
decode_at	data/source.py	/^    def decode_at(self, i, **kwargs): return self.decode(self[i], **kwargs)$/;"	m	class:DsrcSubset
decode_at	local/data/pipeline.py	/^    def decode_at(self, idx): return self.decode(self[idx])$/;"	m	class:Pipeline
decode_at	local/data/pipeline.py	/^    def decode_at(self, idx): return self.decode(self[idx])$/;"	m	class:TfmdList
decode_at	local/data/source.py	/^    def decode_at(self, i, **kwargs): return self.decode(self[i], **kwargs)$/;"	m	class:DsrcSubset
decode_batch	data/pipeline.py	/^    def decode_batch(self, b, **kwargs):$/;"	m	class:TfmdList
decode_batch	data/source.py	/^    def decode_batch(self, b, **kwargs): return self.dsrc.decode_batch(b, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
decode_batch	local/data/pipeline.py	/^    def decode_batch(self, b, **kwargs):$/;"	m	class:TfmdList
decode_batch	local/data/source.py	/^    def decode_batch(self, b, **kwargs): return self.dsrc.decode_batch(b, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
decodes	data/core.py	/^    def decodes(self, b): return to_cpu(b)$/;"	m	class:Cuda
decodes	data/core.py	/^    def decodes(self, o):  return self.vocab[o]$/;"	m	class:Categorize
decodes	data/core.py	/^    def decodes(self, o): return o.clamp(0., 1.) if self.div else o$/;"	m	class:ByteToFloatTensor
decodes	data/core.py	/^    def decodes(self, x):    return (x*self.std ) + self.mean$/;"	m	class:Normalize
decodes	data/pipeline.py	/^    def decodes(self, o, *args, **kwargs): return o$/;"	m	class:Transform
decodes	local/data/core.py	/^    def decodes(self, b): return to_cpu(b)$/;"	m	class:Cuda
decodes	local/data/core.py	/^    def decodes(self, o):  return self.vocab[o]$/;"	m	class:Categorize
decodes	local/data/core.py	/^    def decodes(self, o): return o.clamp(0., 1.) if self.div else o$/;"	m	class:ByteToFloatTensor
decodes	local/data/core.py	/^    def decodes(self, x):    return (x*self.std ) + self.mean$/;"	m	class:Normalize
decodes	local/data/pipeline.py	/^    def decodes(self, o, *args, **kwargs): return o$/;"	m	class:Transform
decodes	local/vision/core.py	/^    def decodes(self, o): return unpermute_image(o)/;"	m	class:ImageToByteTensor
decodes	vision/core.py	/^    def decodes(self, o): return unpermute_image(o)/;"	m	class:ImageToByteTensor
defaultdict	imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
defaultdict	local/imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
defaults	core.py	/^defaults = SimpleNamespace()$/;"	v
defaults	local/core.py	/^defaults = SimpleNamespace()$/;"	v
delete	data/pipeline.py	/^    def delete(self, idx): del(self.tfms[idx])$/;"	m	class:Pipeline
delete	local/data/pipeline.py	/^    def delete(self, idx): del(self.tfms[idx])$/;"	m	class:Pipeline
display	local/notebook/showdoc.py	/^from IPython.display import Markdown,display$/;"	i
display	notebook/showdoc.py	/^from IPython.display import Markdown,display$/;"	i
do_begin_fit	learner.py	/^    def do_begin_fit(self, n_epoch):$/;"	m	class:Learner
do_begin_fit	local/learner.py	/^    def do_begin_fit(self, n_epoch):$/;"	m	class:Learner
do_epoch_train	learner.py	/^    def do_epoch_train(self, epoch):$/;"	m	class:Learner
do_epoch_train	local/learner.py	/^    def do_epoch_train(self, epoch):$/;"	m	class:Learner
do_epoch_validate	learner.py	/^    def do_epoch_validate(self):$/;"	m	class:Learner
do_epoch_validate	local/learner.py	/^    def do_epoch_validate(self):$/;"	m	class:Learner
doc	local/notebook/showdoc.py	/^def doc(elt):$/;"	f
doc	notebook/showdoc.py	/^def doc(elt):$/;"	f
doc_link	local/notebook/showdoc.py	/^def doc_link(name, include_bt:bool=True):$/;"	f
doc_link	notebook/showdoc.py	/^def doc_link(name, include_bt:bool=True):$/;"	f
docs	core.py	/^def docs(cls):$/;"	f
docs	local/core.py	/^def docs(cls):$/;"	f
download_data	data/external.py	/^def download_data(url, fname=None, c_key=ConfigKey.Archive, force_download=False):$/;"	f
download_data	local/data/external.py	/^def download_data(url, fname=None, c_key=ConfigKey.Archive, force_download=False):$/;"	f
download_url	data/external.py	/^def download_url(url, dest, overwrite=False, pbar=None, show_progress=True, chunk_size=1024*1024,$/;"	f
download_url	local/data/external.py	/^def download_url(url, dest, overwrite=False, pbar=None, show_progress=True, chunk_size=1024*1024,$/;"	f
encodes	data/core.py	/^    def encodes(self, b): return to_device(b, self.device)$/;"	m	class:Cuda
encodes	data/core.py	/^    def encodes(self, o): return o.float().div_(255.) if self.div else o.float()$/;"	m	class:ByteToFloatTensor
encodes	data/core.py	/^    def encodes(self, o): return self.o2i[o] if self.o2i else o$/;"	m	class:Categorize
encodes	data/core.py	/^    def encodes(self, x): return (x-self.mean) \/ self.std$/;"	m	class:Normalize
encodes	local/data/core.py	/^    def encodes(self, b): return to_device(b, self.device)$/;"	m	class:Cuda
encodes	local/data/core.py	/^    def encodes(self, o): return o.float().div_(255.) if self.div else o.float()$/;"	m	class:ByteToFloatTensor
encodes	local/data/core.py	/^    def encodes(self, o): return self.o2i[o] if self.o2i else o$/;"	m	class:Categorize
encodes	local/data/core.py	/^    def encodes(self, x): return (x-self.mean) \/ self.std$/;"	m	class:Normalize
encodes	local/vision/core.py	/^    def encodes(self, fn): return Image.open(fn)$/;"	m	class:Imagify
encodes	local/vision/core.py	/^    def encodes(self, o): return image2byte(o)$/;"	m	class:ImageToByteTensor
encodes	local/vision/core.py	/^    def encodes(self, o): return image_resize(o, size=self.size, resample=self.resample)$/;"	m	class:ImageResizer
encodes	local/vision/core.py	/^    def encodes(self, o): return o.convert(self.mode)$/;"	m	class:ImageConverter
encodes	vision/core.py	/^    def encodes(self, fn): return Image.open(fn)$/;"	m	class:Imagify
encodes	vision/core.py	/^    def encodes(self, o): return image2byte(o)$/;"	m	class:ImageToByteTensor
encodes	vision/core.py	/^    def encodes(self, o): return image_resize(o, size=self.size, resample=self.resample)$/;"	m	class:ImageResizer
encodes	vision/core.py	/^    def encodes(self, o): return o.convert(self.mode)$/;"	m	class:ImageConverter
enum	local/notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
enum	notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
equals	imports.py	/^def equals(a,b):$/;"	f
equals	local/imports.py	/^def equals(a,b):$/;"	f
event	learner.py	/^event = SimpleNamespace(**{o:o for o in {$/;"	v
event	local/learner.py	/^event = SimpleNamespace(**{o:o for o in {$/;"	v
execute_nb	local/notebook/export2html.py	/^def execute_nb(nb, metadata=None, show_doc_only=True, name=None):$/;"	f
execute_nb	notebook/export2html.py	/^def execute_nb(nb, metadata=None, show_doc_only=True, name=None):$/;"	f
export_names	local/notebook/export.py	/^def export_names(code, func_only=False):$/;"	f
export_names	notebook/export.py	/^def export_names(code, func_only=False):$/;"	f
extend	layers.py	/^    def extend(self,l):      return self.layers.extend(l)$/;"	m	class:SequentialEx
extend	local/layers.py	/^    def extend(self,l):      return self.layers.extend(l)$/;"	m	class:SequentialEx
extra_add	local/notebook/export.py	/^def extra_add(code):$/;"	f
extra_add	notebook/export.py	/^def extra_add(code):$/;"	f
find_bs	core.py	/^def find_bs(b):$/;"	f
find_bs	local/core.py	/^def find_bs(b):$/;"	f
find_default_export	local/notebook/export.py	/^def find_default_export(cells):$/;"	f
find_default_export	notebook/export.py	/^def find_default_export(cells):$/;"	f
find_default_level	local/notebook/export2html.py	/^def find_default_level(cells):$/;"	f
find_default_level	notebook/export2html.py	/^def find_default_level(cells):$/;"	f
find_device	core.py	/^def find_device(b):$/;"	f
find_device	local/core.py	/^def find_device(b):$/;"	f
fit	learner.py	/^    def fit(self, n_epoch, cbs=None, reset_opt=False):$/;"	m	class:Learner
fit	local/learner.py	/^    def fit(self, n_epoch, cbs=None, reset_opt=False):$/;"	m	class:Learner
format_param	local/notebook/showdoc.py	/^def format_param(p):$/;"	f
format_param	notebook/showdoc.py	/^def format_param(p):$/;"	f
format_time	learner.py	/^from fastprogress.fastprogress import format_time$/;"	i
format_time	local/learner.py	/^from fastprogress.fastprogress import format_time$/;"	i
forward	layers.py	/^    def forward(self, x): return act_fn(self.convs(x) + self.idconv(self.pool(x)))/;"	m	class:ResBlock
forward	layers.py	/^    def forward(self, x): return self.func(x)$/;"	m	class:Lambda
forward	layers.py	/^    def forward(self, x): return self.func(x)$/;"	m	class:PartialLayer
forward	layers.py	/^    def forward(self, x): return sigmoid_range(x, self.low, self.high)$/;"	m	class:SigmoidRange
forward	layers.py	/^    def forward(self, x): return torch.cat([self.mp(x), self.ap(x)], 1)$/;"	m	class:AdaptiveConcatPool2d
forward	layers.py	/^    def forward(self, x): return torch.cat([x,x.orig], dim=1) if self.dense else (x+x.orig)$/;"	m	class:MergeLayer
forward	layers.py	/^    def forward(self, x): return x.view(self.size)$/;"	m	class:View
forward	layers.py	/^    def forward(self, x):$/;"	m	class:BatchNorm1dFlat
forward	layers.py	/^    def forward(self, x):$/;"	m	class:Flatten
forward	layers.py	/^    def forward(self, x):$/;"	m	class:PooledSelfAttention2d
forward	layers.py	/^    def forward(self, x):$/;"	m	class:ResizeBatch
forward	layers.py	/^    def forward(self, x):$/;"	m	class:SelfAttention
forward	layers.py	/^    def forward(self, x):$/;"	m	class:SequentialEx
forward	layers.py	/^    def forward(self,x):$/;"	m	class:Debugger
forward	local/layers.py	/^    def forward(self, x): return act_fn(self.convs(x) + self.idconv(self.pool(x)))/;"	m	class:ResBlock
forward	local/layers.py	/^    def forward(self, x): return self.func(x)$/;"	m	class:Lambda
forward	local/layers.py	/^    def forward(self, x): return self.func(x)$/;"	m	class:PartialLayer
forward	local/layers.py	/^    def forward(self, x): return sigmoid_range(x, self.low, self.high)$/;"	m	class:SigmoidRange
forward	local/layers.py	/^    def forward(self, x): return torch.cat([self.mp(x), self.ap(x)], 1)$/;"	m	class:AdaptiveConcatPool2d
forward	local/layers.py	/^    def forward(self, x): return torch.cat([x,x.orig], dim=1) if self.dense else (x+x.orig)$/;"	m	class:MergeLayer
forward	local/layers.py	/^    def forward(self, x): return x.view(self.size)$/;"	m	class:View
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:BatchNorm1dFlat
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:Flatten
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:PooledSelfAttention2d
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:ResizeBatch
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:SelfAttention
forward	local/layers.py	/^    def forward(self, x):$/;"	m	class:SequentialEx
forward	local/layers.py	/^    def forward(self,x):$/;"	m	class:Debugger
functools	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
functools	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
get_files	data/core.py	/^def get_files(path, extensions=None, recurse=True, include=None):$/;"	f
get_files	local/data/core.py	/^def get_files(path, extensions=None, recurse=True, include=None):$/;"	f
get_function_source	local/notebook/showdoc.py	/^def get_function_source(func):$/;"	f
get_function_source	notebook/showdoc.py	/^def get_function_source(func):$/;"	f
get_image_files	data/core.py	/^def get_image_files(path, recurse=True, include=None):$/;"	f
get_image_files	local/data/core.py	/^def get_image_files(path, recurse=True, include=None):$/;"	f
get_metadata	local/notebook/export2html.py	/^def get_metadata(cells):$/;"	f
get_metadata	notebook/export2html.py	/^def get_metadata(cells):$/;"	f
get_name	local/notebook/export.py	/^def get_name(obj):$/;"	f
get_name	notebook/export.py	/^def get_name(obj):$/;"	f
get_path	data/external.py	/^def get_path(c_key=ConfigKey.Data):$/;"	f
get_path	local/data/external.py	/^def get_path(c_key=ConfigKey.Data):$/;"	f
get_source_link	local/notebook/showdoc.py	/^def get_source_link(func, local=False, is_name=None):$/;"	f
get_source_link	notebook/showdoc.py	/^def get_source_link(func, local=False, is_name=None):$/;"	f
glob	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
glob	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
grad_params	local/optimizer.py	/^    def grad_params(self):$/;"	m	class:Optimizer
grad_params	optimizer.py	/^    def grad_params(self):$/;"	m	class:Optimizer
hashlib	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
hashlib	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
hide_cells	local/notebook/export2html.py	/^def hide_cells(cell):$/;"	f
hide_cells	notebook/export2html.py	/^def hide_cells(cell):$/;"	f
icnr_init	layers.py	/^def icnr_init(x, scale=2, init=nn.init.kaiming_normal_):$/;"	f
icnr_init	local/layers.py	/^def icnr_init(x, scale=2, init=nn.init.kaiming_normal_):$/;"	f
ifnone	core.py	/^def ifnone(a, b):$/;"	f
ifnone	local/core.py	/^def ifnone(a, b):$/;"	f
image2byte	local/vision/core.py	/^def image2byte(img):$/;"	f
image2byte	vision/core.py	/^def image2byte(img):$/;"	f
image_extensions	data/core.py	/^image_extensions = set(k for k,v in mimetypes.types_map.items() if v.startswith('image\/'))$/;"	v
image_extensions	local/data/core.py	/^image_extensions = set(k for k,v in mimetypes.types_map.items() if v.startswith('image\/'))$/;"	v
image_resize	local/vision/core.py	/^def image_resize(img, size, resample=Image.BILINEAR):$/;"	f
image_resize	vision/core.py	/^def image_resize(img, size, resample=Image.BILINEAR):$/;"	f
in_colab	local/notebook/core.py	/^def in_colab():$/;"	f
in_colab	notebook/core.py	/^def in_colab():$/;"	f
in_ipython	local/notebook/core.py	/^def in_ipython():$/;"	f
in_ipython	notebook/core.py	/^def in_ipython():$/;"	f
in_notebook	local/notebook/core.py	/^def in_notebook():$/;"	f
in_notebook	notebook/core.py	/^def in_notebook():$/;"	f
init_default	layers.py	/^def init_default(m, func=nn.init.kaiming_normal_):$/;"	f
init_default	local/layers.py	/^def init_default(m, func=nn.init.kaiming_normal_):$/;"	f
insert	layers.py	/^    def insert(self,i,l):    return self.layers.insert(i,l)$/;"	m	class:SequentialEx
insert	local/layers.py	/^    def insert(self,i,l):    return self.layers.insert(i,l)$/;"	m	class:SequentialEx
inspect	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
inspect	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
inspect	local/nbdoc.py	/^import inspect/;"	i
inspect	local/notebook/export.py	/^import nbformat,inspect$/;"	i
inspect	local/notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
inspect	nbdoc.py	/^import inspect/;"	i
inspect	notebook/export.py	/^import nbformat,inspect$/;"	i
inspect	notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
io	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
io	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
is_close	local/test.py	/^def is_close(a,b,eps=1e-5):$/;"	f
is_close	test.py	/^def is_close(a,b,eps=1e-5):$/;"	f
is_enum	local/notebook/showdoc.py	/^def is_enum(cls):$/;"	f
is_enum	notebook/showdoc.py	/^def is_enum(cls):$/;"	f
is_export	local/notebook/export.py	/^def is_export(cell, default):$/;"	f
is_export	notebook/export.py	/^def is_export(cell, default):$/;"	f
is_fastai_module	local/notebook/showdoc.py	/^def is_fastai_module(name):$/;"	f
is_fastai_module	notebook/showdoc.py	/^def is_fastai_module(name):$/;"	f
is_iter	core.py	/^def is_iter(o):$/;"	f
is_iter	local/core.py	/^def is_iter(o):$/;"	f
is_listy	core.py	/^def is_listy(x):$/;"	f
is_listy	local/core.py	/^def is_listy(x):$/;"	f
item_find	core.py	/^def item_find(x, idx=0):$/;"	f
item_find	local/core.py	/^def item_find(x, idx=0):$/;"	f
itemgetter	imports.py	/^from operator import itemgetter,attrgetter$/;"	i
itemgetter	local/imports.py	/^from operator import itemgetter,attrgetter$/;"	i
itemgot	core.py	/^    def itemgot(self, idx): return self.mapped(itemgetter(idx))$/;"	m	class:L
itemgot	local/core.py	/^    def itemgot(self, idx): return self.mapped(itemgetter(idx))$/;"	m	class:L
itertools	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
itertools	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
itertools	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
itertools	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
json	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
json	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
l2_reg	local/optimizer.py	/^def l2_reg(p, lr, wd, **kwargs):$/;"	f
l2_reg	optimizer.py	/^def l2_reg(p, lr, wd, **kwargs):$/;"	f
len	data/source.py	/^    def len(self,filt): return len(self.filts[filt])$/;"	m	class:DataSource
len	local/data/source.py	/^    def len(self,filt): return len(self.filts[filt])$/;"	m	class:DataSource
ls	core.py	/^def ls(self:Path):$/;"	f
ls	local/core.py	/^def ls(self:Path):$/;"	f
make_cross_image	core.py	/^def make_cross_image(bw=True):$/;"	f
make_cross_image	local/core.py	/^def make_cross_image(bw=True):$/;"	f
make_tfm	data/pipeline.py	/^def make_tfm(tfm):$/;"	f
make_tfm	local/data/pipeline.py	/^def make_tfm(tfm):$/;"	f
mapped	core.py	/^    def mapped(self, f):    return L(map(f, self))$/;"	m	class:L
mapped	local/core.py	/^    def mapped(self, f):    return L(map(f, self))$/;"	m	class:L
mapper	core.py	/^def mapper(f):$/;"	f
mapper	local/core.py	/^def mapper(f):$/;"	f
mask2idxs	core.py	/^def mask2idxs(mask):$/;"	f
mask2idxs	local/core.py	/^def mask2idxs(mask):$/;"	f
master_bar	imports.py	/^from fastprogress import progress_bar,master_bar$/;"	i
master_bar	local/imports.py	/^from fastprogress import progress_bar,master_bar$/;"	i
math	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
math	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
matplotlib	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
matplotlib	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
md2html	local/notebook/showdoc.py	/^def md2html(md):$/;"	f
md2html	notebook/showdoc.py	/^def md2html(md):$/;"	f
methods	core.py	/^        if hasattr(f,'__func__'): f = f.__func__ # required for class methods$/;"	c	function:add_docs
methods	local/core.py	/^        if hasattr(f,'__func__'): f = f.__func__ # required for class methods$/;"	c	function:add_docs
mimetypes	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
mimetypes	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
momentum_step	local/optimizer.py	/^def momentum_step(p, lr, grad_avg, **kwargs):$/;"	f
momentum_step	optimizer.py	/^def momentum_step(p, lr, grad_avg, **kwargs):$/;"	f
n__file__	local/notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
n__file__	notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
n_subsets	data/source.py	/^    def n_subsets(self): return len(self.filts)$/;"	m	class:DataSource
n_subsets	local/data/source.py	/^    def n_subsets(self): return len(self.filts)$/;"	m	class:DataSource
name	learner.py	/^    def name(self):  return "loss"$/;"	m	class:AvgLoss
name	learner.py	/^    def name(self):  return self.func.__name__$/;"	m	class:AvgMetric
name	learner.py	/^    def name(self):$/;"	m	class:Callback
name	learner.py	/^    def name(self):$/;"	m	class:Metric
name	local/learner.py	/^    def name(self):  return "loss"$/;"	m	class:AvgLoss
name	local/learner.py	/^    def name(self):  return self.func.__name__$/;"	m	class:AvgMetric
name	local/learner.py	/^    def name(self):$/;"	m	class:Callback
name	local/learner.py	/^    def name(self):$/;"	m	class:Metric
name	local/notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
name	notebook/export2html.py	/^    if name: source += f"\\nfrom pathlib import Path\\n__file__ = {name}"$/;"	i
namedtuple	imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
namedtuple	local/imports.py	/^from collections import OrderedDict,defaultdict,Counter,namedtuple$/;"	i
nbconvert	local/notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
nbconvert	notebook/showdoc.py	/^import inspect,enum,nbconvert$/;"	i
nbformat	local/notebook/export.py	/^import nbformat,inspect$/;"	i
nbformat	local/notebook/export2html.py	/^import nbformat$/;"	i
nbformat	notebook/export.py	/^import nbformat,inspect$/;"	i
nbformat	notebook/export2html.py	/^import nbformat$/;"	i
ndarray	imports.py	/^from numpy import array,ndarray$/;"	i
ndarray	local/imports.py	/^from numpy import array,ndarray$/;"	i
nequals	local/test.py	/^def nequals(a,b):$/;"	f
nequals	test.py	/^def nequals(a,b):$/;"	f
newchk	core.py	/^def newchk(cls):$/;"	f
newchk	local/core.py	/^def newchk(cls):$/;"	f
nn	imports.py	/^import torch.nn as nn$/;"	i
nn	imports.py	/^import torch.nn.functional as F$/;"	i
nn	local/imports.py	/^import torch.nn as nn$/;"	i
nn	local/imports.py	/^import torch.nn.functional as F$/;"	i
noop	core.py	/^def noop (x=None, *args, **kwargs):$/;"	f
noop	local/core.py	/^def noop (x=None, *args, **kwargs):$/;"	f
noops	core.py	/^def noops(self, x, *args, **kwargs):$/;"	f
noops	local/core.py	/^def noops(self, x, *args, **kwargs):$/;"	f
notebook2script	local/notebook/export.py	/^def notebook2script(fname=None, all_fs=None, up_to=None):$/;"	f
notebook2script	notebook/export.py	/^def notebook2script(fname=None, all_fs=None, up_to=None):$/;"	f
np	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
np	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
one_batch	data/core.py	/^    def one_batch(self): return next(iter(self))$/;"	m	class:TfmdDL
one_batch	learner.py	/^    def one_batch(self, xb, yb, i=None):$/;"	m	class:Learner
one_batch	local/data/core.py	/^    def one_batch(self): return next(iter(self))$/;"	m	class:TfmdDL
one_batch	local/learner.py	/^    def one_batch(self, xb, yb, i=None):$/;"	m	class:Learner
operator	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
operator	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
opt_call	core.py	/^def opt_call(f, fname='__call__', *args, **kwargs):$/;"	f
opt_call	local/core.py	/^def opt_call(f, fname='__call__', *args, **kwargs):$/;"	f
order	data/core.py	/^    order=20 #Need to run after CUDA if on the GPU$/;"	v	class:ByteToFloatTensor
order	data/core.py	/^    order=99$/;"	v	class:Normalize
order	learner.py	/^    order = 20$/;"	v	class:Recorder
order	learner.py	/^    order=0$/;"	v	class:Callback
order	local/data/core.py	/^    order=20 #Need to run after CUDA if on the GPU$/;"	v	class:ByteToFloatTensor
order	local/data/core.py	/^    order=99$/;"	v	class:Normalize
order	local/learner.py	/^    order = 20$/;"	v	class:Recorder
order	local/learner.py	/^    order=0$/;"	v	class:Callback
order	local/vision/core.py	/^    order=15$/;"	v	class:ImageToByteTensor
order	vision/core.py	/^    order=15$/;"	v	class:ImageToByteTensor
os	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
os	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
page	local/notebook/showdoc.py	/^from IPython.core import page$/;"	i
page	notebook/showdoc.py	/^from IPython.core import page$/;"	i
parent_label	data/core.py	/^def parent_label(o, **kwargs):$/;"	f
parent_label	local/data/core.py	/^def parent_label(o, **kwargs):$/;"	f
partial	imports.py	/^from functools import partial,reduce$/;"	i
partial	local/imports.py	/^from functools import partial,reduce$/;"	i
partialler	core.py	/^def partialler(f, *args, order=None, **kwargs):$/;"	f
partialler	local/core.py	/^def partialler(f, *args, order=None, **kwargs):$/;"	f
patch	core.py	/^def patch(f):$/;"	f
patch	local/core.py	/^def patch(f):$/;"	f
pd	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
pd	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
pickle	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
pickle	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
piped	data/pipeline.py	/^    def piped(cls, tfms=None, final_tfms=None):$/;"	m	class:TfmOver
piped	local/data/pipeline.py	/^    def piped(cls, tfms=None, final_tfms=None):$/;"	m	class:TfmOver
plot	learner.py	/^    def plot(self, skip_last=0):$/;"	m	class:Recorder
plot	local/learner.py	/^    def plot(self, skip_last=0):$/;"	m	class:Recorder
plot_loss	learner.py	/^    def plot_loss(self): plt.plot(self.losses)$/;"	m	class:Recorder
plot_loss	local/learner.py	/^    def plot_loss(self): plt.plot(self.losses)$/;"	m	class:Recorder
plot_lr	learner.py	/^    def plot_lr  (self): plt.plot(self.lrs)$/;"	m	class:Recorder
plot_lr	local/learner.py	/^    def plot_lr  (self): plt.plot(self.lrs)$/;"	m	class:Recorder
plt	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
plt	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
preprocess_cell	local/notebook/export2html.py	/^    def preprocess_cell(self, cell, resources, index):$/;"	m	class:ExecuteShowDocPreprocessor
preprocess_cell	notebook/export2html.py	/^    def preprocess_cell(self, cell, resources, index):$/;"	m	class:ExecuteShowDocPreprocessor
process_cell	local/notebook/export2html.py	/^process_cell  = [hide_cells, remove_widget_state, treat_backticks, add_jekyll_notes, convert_links]$/;"	v
process_cell	notebook/export2html.py	/^process_cell  = [hide_cells, remove_widget_state, treat_backticks, add_jekyll_notes, convert_links]$/;"	v
process_cells	local/notebook/export2html.py	/^process_cells = [remove_fake_headers, remove_hidden, remove_empty]$/;"	v
process_cells	notebook/export2html.py	/^process_cells = [remove_fake_headers, remove_hidden, remove_empty]$/;"	v
progress_bar	imports.py	/^from fastprogress import progress_bar,master_bar$/;"	i
progress_bar	local/imports.py	/^from fastprogress import progress_bar,master_bar$/;"	i
qual_name	local/notebook/export.py	/^def qual_name(obj):$/;"	f
qual_name	notebook/export.py	/^def qual_name(obj):$/;"	f
random	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
random	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
range_of	core.py	/^def range_of(x):$/;"	f
range_of	local/core.py	/^def range_of(x):$/;"	f
re	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
re	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
read_nb	local/notebook/export.py	/^def read_nb(fname):$/;"	f
read_nb	notebook/export.py	/^def read_nb(fname):$/;"	f
redirect_stdout	imports.py	/^from contextlib import redirect_stdout,contextmanager$/;"	i
redirect_stdout	local/imports.py	/^from contextlib import redirect_stdout,contextmanager$/;"	i
reduce	imports.py	/^from functools import partial,reduce$/;"	i
reduce	local/imports.py	/^from functools import partial,reduce$/;"	i
reduction	layers.py	/^    def reduction(self): return self.func.reduction$/;"	m	class:FlattenedLoss
reduction	layers.py	/^    def reduction(self, v): self.func.reduction = v$/;"	m	class:FlattenedLoss
reduction	local/layers.py	/^    def reduction(self): return self.func.reduction$/;"	m	class:FlattenedLoss
reduction	local/layers.py	/^    def reduction(self, v): self.func.reduction = v$/;"	m	class:FlattenedLoss
remove	data/pipeline.py	/^    def remove(self, tfm): self.tfms.remove(tfm)$/;"	m	class:Pipeline
remove	local/data/pipeline.py	/^    def remove(self, tfm): self.tfms.remove(tfm)$/;"	m	class:Pipeline
remove_cb	learner.py	/^    def remove_cb(self, cb):$/;"	m	class:Learner
remove_cb	local/learner.py	/^    def remove_cb(self, cb):$/;"	m	class:Learner
remove_cbs	learner.py	/^    def remove_cbs(self, cbs):$/;"	m	class:Learner
remove_cbs	local/learner.py	/^    def remove_cbs(self, cbs):$/;"	m	class:Learner
remove_empty	local/notebook/export2html.py	/^def remove_empty(cells):$/;"	f
remove_empty	notebook/export2html.py	/^def remove_empty(cells):$/;"	f
remove_fake_headers	local/notebook/export2html.py	/^def remove_fake_headers(cells):$/;"	f
remove_fake_headers	notebook/export2html.py	/^def remove_fake_headers(cells):$/;"	f
remove_hidden	local/notebook/export2html.py	/^def remove_hidden(cells):$/;"	f
remove_hidden	notebook/export2html.py	/^def remove_hidden(cells):$/;"	f
remove_widget_state	local/notebook/export2html.py	/^def remove_widget_state(cell):$/;"	f
remove_widget_state	notebook/export2html.py	/^def remove_widget_state(cell):$/;"	f
replicate	core.py	/^def replicate(item,match):$/;"	f
replicate	local/core.py	/^def replicate(item,match):$/;"	f
requests	imports.py	/^import PIL,requests,yaml$/;"	i
requests	local/imports.py	/^import PIL,requests,yaml$/;"	i
reset	learner.py	/^    def reset(self):               self.count,self.val = 0,tensor(0.)$/;"	m	class:AvgSmoothLoss
reset	learner.py	/^    def reset(self):             pass$/;"	m	class:Metric
reset	learner.py	/^    def reset(self):           self.total,self.count = 0.,0$/;"	m	class:AvgLoss
reset	learner.py	/^    def reset(self):           self.total,self.count = 0.,0$/;"	m	class:AvgMetric
reset	local/learner.py	/^    def reset(self):               self.count,self.val = 0,tensor(0.)$/;"	m	class:AvgSmoothLoss
reset	local/learner.py	/^    def reset(self):             pass$/;"	m	class:Metric
reset	local/learner.py	/^    def reset(self):           self.total,self.count = 0.,0$/;"	m	class:AvgLoss
reset	local/learner.py	/^    def reset(self):           self.total,self.count = 0.,0$/;"	m	class:AvgMetric
rms_prop_step	local/optimizer.py	/^def rms_prop_step(p, lr, sqr_avg, eps, grad_avg=None, **kwargs):$/;"	f
rms_prop_step	optimizer.py	/^def rms_prop_step(p, lr, sqr_avg, eps, grad_avg=None, **kwargs):$/;"	f
scipy	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
scipy	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
set_trace	imports.py	/^from IPython.core.debugger import set_trace$/;"	i
set_trace	local/imports.py	/^from IPython.core.debugger import set_trace$/;"	i
set_tupled	data/pipeline.py	/^    def set_tupled(self, m=True): _set_tupled(self._tfms, m)$/;"	m	class:Pipeline
set_tupled	data/pipeline.py	/^    def set_tupled(self, tf=True): self.is_tuple = ifnone(self.is_tuple,tf)$/;"	m	class:Transform
set_tupled	local/data/pipeline.py	/^    def set_tupled(self, m=True): _set_tupled(self._tfms, m)$/;"	m	class:Pipeline
set_tupled	local/data/pipeline.py	/^    def set_tupled(self, tf=True): self.is_tuple = ifnone(self.is_tuple,tf)$/;"	m	class:Transform
setify	core.py	/^def setify(o): return o if isinstance(o,set) else set(L(o))$/;"	f
setify	local/core.py	/^def setify(o): return o if isinstance(o,set) else set(L(o))$/;"	f
setup	data/pipeline.py	/^    def setup(self): getattr(self.tfm,'setup',noop)(self)$/;"	m	class:TfmdList
setup	data/pipeline.py	/^    def setup(self, items=None):$/;"	m	class:Transform
setup	local/data/pipeline.py	/^    def setup(self): getattr(self.tfm,'setup',noop)(self)$/;"	m	class:TfmdList
setup	local/data/pipeline.py	/^    def setup(self, items=None):$/;"	m	class:Transform
setups	data/core.py	/^    def setups(self, dsrc):$/;"	m	class:Categorize
setups	data/pipeline.py	/^    def setups(self, items): pass$/;"	m	class:Transform
setups	data/pipeline.py	/^    def setups(self, items=None):$/;"	m	class:Pipeline
setups	data/pipeline.py	/^    def setups(self, o=None):$/;"	m	class:TfmOver
setups	local/data/core.py	/^    def setups(self, dsrc):$/;"	m	class:Categorize
setups	local/data/pipeline.py	/^    def setups(self, items): pass$/;"	m	class:Transform
setups	local/data/pipeline.py	/^    def setups(self, items=None):$/;"	m	class:Pipeline
setups	local/data/pipeline.py	/^    def setups(self, o=None):$/;"	m	class:TfmOver
sgd_step	local/optimizer.py	/^def sgd_step(p, lr, **kwargs):$/;"	f
sgd_step	optimizer.py	/^def sgd_step(p, lr, **kwargs):$/;"	f
show	data/pipeline.py	/^    def show(self, o, *args, **kwargs):$/;"	m	class:Pipeline
show	data/pipeline.py	/^    def show(self, o, ctx=None, **kwargs):$/;"	m	class:TfmOver
show	data/pipeline.py	/^    def show(self, o, filt=None, **kwargs): return self.assoc.shows(self.decode(o, filt=filt), **kwargs)$/;"	m	class:Transform
show	data/source.py	/^    def show     (self, o, **kwargs): return self.dsrc.show(o, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
show	local/data/pipeline.py	/^    def show(self, o, *args, **kwargs):$/;"	m	class:Pipeline
show	local/data/pipeline.py	/^    def show(self, o, ctx=None, **kwargs):$/;"	m	class:TfmOver
show	local/data/pipeline.py	/^    def show(self, o, filt=None, **kwargs): return self.assoc.shows(self.decode(o, filt=filt), **kwargs)$/;"	m	class:Transform
show	local/data/source.py	/^    def show     (self, o, **kwargs): return self.dsrc.show(o, filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
show_at	data/pipeline.py	/^    def show_at(self, idx): return self.show(self[idx])$/;"	m	class:Pipeline
show_at	data/pipeline.py	/^    def show_at(self, idx): return self.show(self[idx])$/;"	m	class:TfmdList
show_at	data/source.py	/^    def show_at  (self, i, **kwargs): return self.dsrc.show(self[i], filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
show_at	local/data/pipeline.py	/^    def show_at(self, idx): return self.show(self[idx])$/;"	m	class:Pipeline
show_at	local/data/pipeline.py	/^    def show_at(self, idx): return self.show(self[idx])$/;"	m	class:TfmdList
show_at	local/data/source.py	/^    def show_at  (self, i, **kwargs): return self.dsrc.show(self[i], filt=self.filt, **kwargs)$/;"	m	class:DsrcSubset
show_batch	data/core.py	/^    def show_batch(self, b=None, max_rows=1000, ctxs=None, **kwargs):$/;"	m	class:TfmdDL
show_batch	local/data/core.py	/^    def show_batch(self, b=None, max_rows=1000, ctxs=None, **kwargs):$/;"	m	class:TfmdDL
show_doc	core.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	data/core.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	data/pipeline.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	data/source.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	learner.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	local/core.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	local/data/core.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	local/data/pipeline.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	local/data/source.py	/^from ..notebook.showdoc import show_doc$/;"	i
show_doc	local/learner.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	local/notebook/showdoc.py	/^def show_doc(elt, doc_string=True, name=None, title_level=None, disp=True, default_cls_level=2):$/;"	f
show_doc	local/optimizer.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	local/test.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	notebook/showdoc.py	/^def show_doc(elt, doc_string=True, name=None, title_level=None, disp=True, default_cls_level=2):$/;"	f
show_doc	optimizer.py	/^from .notebook.showdoc import show_doc$/;"	i
show_doc	test.py	/^from .notebook.showdoc import show_doc$/;"	i
show_image	data/core.py	/^def show_image(im, ax=None, figsize=None, title=None, ctx=None, **kwargs):$/;"	f
show_image	local/data/core.py	/^def show_image(im, ax=None, figsize=None, title=None, ctx=None, **kwargs):$/;"	f
show_image_batch	data/core.py	/^def show_image_batch(b, show=show_titled_image, items=9, cols=3, figsize=None, **kwargs):$/;"	f
show_image_batch	local/data/core.py	/^def show_image_batch(b, show=show_titled_image, items=9, cols=3, figsize=None, **kwargs):$/;"	f
show_title	data/pipeline.py	/^def show_title(o, ax=None, ctx=None):$/;"	f
show_title	local/data/pipeline.py	/^def show_title(o, ax=None, ctx=None):$/;"	f
show_titled_image	data/core.py	/^def show_titled_image(o, **kwargs):$/;"	f
show_titled_image	local/data/core.py	/^def show_titled_image(o, **kwargs):$/;"	f
shows	data/core.py	/^    def shows(self, o, ctx=None, **kwargs): return show_image(o, ax=ctx, **{**kwargs,**self.kw})$/;"	m	class:ImageItem
shows	data/core.py	/^    def shows(self, o, ctx=None, **kwargs): return show_titled_image(o, ax=ctx, **{**kwargs,**self.kw})$/;"	m	class:TitledImageItem
shows	data/pipeline.py	/^    def shows(o, ctx=None, **kwargs):$/;"	m	class:Item
shows	data/source.py	/^    def shows(self,o,**kwargs): return self.f(o,**kwargs)$/;"	m	class:LambdaItem
shows	local/data/core.py	/^    def shows(self, o, ctx=None, **kwargs): return show_image(o, ax=ctx, **{**kwargs,**self.kw})$/;"	m	class:ImageItem
shows	local/data/core.py	/^    def shows(self, o, ctx=None, **kwargs): return show_titled_image(o, ax=ctx, **{**kwargs,**self.kw})$/;"	m	class:TitledImageItem
shows	local/data/pipeline.py	/^    def shows(o, ctx=None, **kwargs):$/;"	m	class:Item
shows	local/data/source.py	/^    def shows(self,o,**kwargs): return self.f(o,**kwargs)$/;"	m	class:LambdaItem
shutil	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
shutil	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
sigmoid_range	layers.py	/^def sigmoid_range(x, low, high):$/;"	f
sigmoid_range	local/layers.py	/^def sigmoid_range(x, low, high):$/;"	f
sorted	core.py	/^    def sorted(self, key=None, reverse=False):$/;"	m	class:L
sorted	local/core.py	/^    def sorted(self, key=None, reverse=False):$/;"	m	class:L
source_link	local/notebook/showdoc.py	/^def source_link(func, is_name=None, disp=True):$/;"	f
source_link	notebook/showdoc.py	/^def source_link(func, is_name=None, disp=True):$/;"	f
source_nb	local/notebook/export.py	/^def source_nb(func, is_name=None, return_all=False):$/;"	f
source_nb	notebook/export.py	/^def source_nb(func, is_name=None, return_all=False):$/;"	f
spectral_norm	layers.py	/^from torch.nn.utils import weight_norm, spectral_norm$/;"	i
spectral_norm	local/layers.py	/^from torch.nn.utils import weight_norm, spectral_norm$/;"	i
stack	core.py	/^    def stack(self, dim=0): return torch.stack(list(self.tensored()), dim=dim)$/;"	m	class:L
stack	local/core.py	/^    def stack(self, dim=0): return torch.stack(list(self.tensored()), dim=dim)$/;"	m	class:L
step	local/optimizer.py	/^    def step(self):$/;"	m	class:Optimizer
step	local/optimizer.py	/^    def step(self):$/;"	m	class:StatefulOptimizer
step	optimizer.py	/^    def step(self):$/;"	m	class:Optimizer
step	optimizer.py	/^    def step(self):$/;"	m	class:StatefulOptimizer
step_stat	local/optimizer.py	/^def step_stat(state, p, **kwargs):$/;"	f
step_stat	optimizer.py	/^def step_stat(state, p, **kwargs):$/;"	f
subset	data/pipeline.py	/^    def subset(self, idxs): return self.__class__(self.items[idxs], self.tfm, do_setup=False)$/;"	m	class:TfmdList
subset	data/source.py	/^    def subset(self, i): return DsrcSubset(self, i)$/;"	m	class:DataSource
subset	local/data/pipeline.py	/^    def subset(self, idxs): return self.__class__(self.items[idxs], self.tfm, do_setup=False)$/;"	m	class:TfmdList
subset	local/data/source.py	/^    def subset(self, i): return DsrcSubset(self, i)$/;"	m	class:DataSource
subsets	data/source.py	/^    def subsets(self): return map(self.subset, range(self.n_subsets))$/;"	m	class:DataSource
subsets	local/data/source.py	/^    def subsets(self): return map(self.subset, range(self.n_subsets))$/;"	m	class:DataSource
sys	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
sys	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
tarfile	imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
tarfile	local/imports.py	/^import io,operator,sys,os,re,os,mimetypes,csv,itertools,json,shutil,glob,pickle,tarfile$/;"	i
tensor	core.py	/^def tensor(x, *rest):$/;"	f
tensor	local/core.py	/^def tensor(x, *rest):$/;"	f
tensored	core.py	/^    def tensored(self):     return self.mapped(tensor)$/;"	m	class:L
tensored	local/core.py	/^    def tensored(self):     return self.mapped(tensor)$/;"	m	class:L
test	local/test.py	/^def test(a, b, cmp,cname=None):$/;"	f
test	test.py	/^def test(a, b, cmp,cname=None):$/;"	f
test_close	local/test.py	/^def test_close(a,b,eps=1e-5):$/;"	f
test_close	test.py	/^def test_close(a,b,eps=1e-5):$/;"	f
test_eq	local/test.py	/^def test_eq(a,b):$/;"	f
test_eq	test.py	/^def test_eq(a,b):$/;"	f
test_fail	local/test.py	/^def test_fail(f, msg='', contains=''):$/;"	f
test_fail	test.py	/^def test_fail(f, msg='', contains=''):$/;"	f
test_is	local/test.py	/^def test_is(a,b):$/;"	f
test_is	test.py	/^def test_is(a,b):$/;"	f
test_ne	local/test.py	/^def test_ne(a,b):$/;"	f
test_ne	test.py	/^def test_ne(a,b):$/;"	f
test_stdout	local/test.py	/^def test_stdout(f, exp, regex=False):$/;"	f
test_stdout	test.py	/^def test_stdout(f, exp, regex=False):$/;"	f
time	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
time	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
to_cpu	core.py	/^def to_cpu(b):$/;"	f
to_cpu	local/core.py	/^def to_cpu(b):$/;"	f
to_detach	core.py	/^def to_detach(b, cpu=True):$/;"	f
to_detach	local/core.py	/^def to_detach(b, cpu=True):$/;"	f
to_device	core.py	/^def to_device(b, device=defaults.device):$/;"	f
to_device	local/core.py	/^def to_device(b, device=defaults.device):$/;"	f
to_float	core.py	/^def to_float(b):$/;"	f
to_float	local/core.py	/^def to_float(b):$/;"	f
to_half	core.py	/^def to_half(b):$/;"	f
to_half	local/core.py	/^def to_half(b):$/;"	f
torch	imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
torch	imports.py	/^import torch.nn as nn$/;"	i
torch	imports.py	/^import torch.nn.functional as F$/;"	i
torch	local/imports.py	/^import torch,matplotlib.pyplot as plt,numpy as np,pandas as pd,scipy$/;"	i
torch	local/imports.py	/^import torch.nn as nn$/;"	i
torch	local/imports.py	/^import torch.nn.functional as F$/;"	i
trainable_params	core.py	/^def trainable_params(m):$/;"	f
trainable_params	local/core.py	/^def trainable_params(m):$/;"	f
treat_backticks	local/notebook/export2html.py	/^def treat_backticks(cell):$/;"	f
treat_backticks	notebook/export2html.py	/^def treat_backticks(cell):$/;"	f
trunc_normal_	layers.py	/^def trunc_normal_(x, mean=0., std=1.):$/;"	f
trunc_normal_	local/layers.py	/^def trunc_normal_(x, mean=0., std=1.):$/;"	f
tuplify	core.py	/^def tuplify(o, use_list=False, match=None):$/;"	f
tuplify	local/core.py	/^def tuplify(o, use_list=False, match=None):$/;"	f
type_repr	local/notebook/showdoc.py	/^def type_repr(t):$/;"	f
type_repr	notebook/showdoc.py	/^def type_repr(t):$/;"	f
typechecked	imports.py	/^from typeguard import typechecked$/;"	i
typechecked	local/imports.py	/^from typeguard import typechecked$/;"	i
types	imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
types	local/imports.py	/^import hashlib,itertools,types,random,inspect,functools,random,time,math,copy$/;"	i
uniqueify	core.py	/^def uniqueify(x, sort=False, bidir=False, start=None):$/;"	f
uniqueify	local/core.py	/^def uniqueify(x, sort=False, bidir=False, start=None):$/;"	f
unpermute_image	local/vision/core.py	/^def unpermute_image(img):$/;"	f
unpermute_image	vision/core.py	/^def unpermute_image(img):$/;"	f
untar_data	data/external.py	/^def untar_data(url, fname=None, dest=None, c_key=ConfigKey.Data, force_download=False):$/;"	f
untar_data	local/data/external.py	/^def untar_data(url, fname=None, dest=None, c_key=ConfigKey.Data, force_download=False):$/;"	f
value	learner.py	/^    def value(self): raise NotImplementedError$/;"	m	class:Metric
value	learner.py	/^    def value(self): return self.total\/self.count$/;"	m	class:AvgLoss
value	learner.py	/^    def value(self): return self.total\/self.count$/;"	m	class:AvgMetric
value	learner.py	/^    def value(self): return self.val\/(1-self.beta**self.count)$/;"	m	class:AvgSmoothLoss
value	local/learner.py	/^    def value(self): raise NotImplementedError$/;"	m	class:Metric
value	local/learner.py	/^    def value(self): return self.total\/self.count$/;"	m	class:AvgLoss
value	local/learner.py	/^    def value(self): return self.total\/self.count$/;"	m	class:AvgMetric
value	local/learner.py	/^    def value(self): return self.val\/(1-self.beta**self.count)$/;"	m	class:AvgSmoothLoss
warn	imports.py	/^from warnings import warn$/;"	i
warn	local/imports.py	/^from warnings import warn$/;"	i
weight_decay	local/optimizer.py	/^def weight_decay(p, lr, wd, **kwargs):$/;"	f
weight_decay	optimizer.py	/^def weight_decay(p, lr, wd, **kwargs):$/;"	f
weight_norm	layers.py	/^from torch.nn.utils import weight_norm, spectral_norm$/;"	i
weight_norm	local/layers.py	/^from torch.nn.utils import weight_norm, spectral_norm$/;"	i
yaml	imports.py	/^import PIL,requests,yaml$/;"	i
yaml	local/imports.py	/^import PIL,requests,yaml$/;"	i
zero_grad	local/optimizer.py	/^    def zero_grad(self):$/;"	m	class:Optimizer
zero_grad	optimizer.py	/^    def zero_grad(self):$/;"	m	class:Optimizer
zipped	core.py	/^    def zipped(self):       return L(zip(*self))$/;"	m	class:L
zipped	local/core.py	/^    def zipped(self):       return L(zip(*self))$/;"	m	class:L

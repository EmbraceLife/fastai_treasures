#AUTOGENERATED! DO NOT EDIT! File to edit: dev/11_optimizer.ipynb (unless otherwise specified).

__all__ = ['Optimizer', 'sgd_step', 'weight_decay', 'l2_reg', 'StatefulOptimizer', 'average_grad', 'average_sqr_grad',
           'momentum_step', 'SGD', 'rms_prop_step', 'RMSProp', 'step_stat', 'adam_step', 'Adam']

from .imports import *
from .test import *
from .core import *
from .notebook.showdoc import show_doc

class Optimizer():
    "Base optimizer class for the fastai library, updating `params` with `steppers`"
    def __init__(self, params, steppers, **defaults):
        steppers,params = L(steppers),L(params)
        for step in steppers: defaults = {**getattr(step, 'defaults', {}), **defaults}
        self.param_groups = params if isinstance(params[0], (L,list)) else L([params])
        self.step_func = compose(*steppers)
        self.hypers = L({**defaults} for p in self.param_groups)

    def grad_params(self):
        "Helper function to loop over param groups then params that have a grad"
        return [(p,hyper) for pg,hyper in zip(self.param_groups,self.hypers)
            for p in pg if p.grad is not None]

    def zero_grad(self):
        "Zero all the grad attributes of the parameters"
        for p,hyper in self.grad_params():
            p.grad.detach_()
            p.grad.zero_()

    def step(self):
        "Execute steppers on all parameters that have a grad"
        for p,hyper in self.grad_params(): self.step_func(p, **hyper)

def sgd_step(p, lr, **kwargs):
    p.data.add_(-lr, p.grad.data)
    return p

def weight_decay(p, lr, wd, **kwargs):
    "Weight decay as decaying `p` with `lr*wd`"
    p.data.mul_(1 - lr*wd)
    return p
weight_decay.defaults = dict(wd=0.)

def l2_reg(p, lr, wd, **kwargs):
    "L2 regularization as adding `wd*p` to `p.grad`"
    p.grad.data.add_(wd, p.data)
    return p
l2_reg.defaults = dict(wd=0.)

class StatefulOptimizer(Optimizer):
    "`Optimizer` that can have state through `stats`"
    def __init__(self, params, steppers, stats=None, **defaults):
        self.stats = L(stats)
        for stat in self.stats: defaults = {**getattr(stat, 'defaults', {}), **defaults}
        super().__init__(params, steppers, **defaults)
        self.state = {}

    def step(self):
        "Update the stats and execute the steppers in on all parameters that have a grad"
        for p,hyper in self.grad_params():
            state = self.state.get(p, {})
            for stat in self.stats: state = stat(state, p, **hyper)
            self.step_func(p, **state, **hyper)
            self.state[p] = state

    def _init_state(self, p):
        "Create a state for p and call all the statistics to initialize it"
        state = {}
        for stat in self.stats: state = {**getattr(stat, "init_state", lambda:{})(p), **state}
        self.state[p] = state

def average_grad(state, p, mom, dampening=False, **kwargs):
    "Keeps track of the avg grads of `p` in `state` with `mom`."
    if 'grad_avg' not in state: state['grad_avg'] = torch.zeros_like(p.grad.data)
    damp = 1-mom if dampening else 1.
    state['grad_avg'].mul_(mom).add_(damp, p.grad.data)
    return state

average_grad.defaults = dict(mom=0.9)

def average_sqr_grad(state, p, sqr_mom, dampening=True, **kwargs):
    if 'sqr_avg' not in state: state['sqr_avg'] = torch.zeros_like(p.grad.data)
    damp = 1-sqr_mom if dampening else 1.
    state['sqr_avg'].mul_(sqr_mom).addcmul_(damp, p.grad.data, p.grad.data)
    return state

average_sqr_grad.defaults = dict(sqr_mom=0.99)

def momentum_step(p, lr, grad_avg, **kwargs):
    "Step for SGD with momentum with `lr`"
    p.data.add_(-lr, grad_avg)
    return p

def SGD(params, lr, mom=0., wd=0., true_wd=True):
    "A `StatefulOptimizer` for SGD with `lr` and `mom` and `params`"
    steppers = [] if wd==0. else [weight_decay] if true_wd else [l2_reg]
    steppers.append(sgd_step if mom==0 else momentum_step)
    if mom == 0.: return Optimizer(params, steppers, lr=lr, wd=wd)
    else: return StatefulOptimizer(params, steppers, stats=average_grad, lr=lr, mom=mom, wd=wd)

def rms_prop_step(p, lr, sqr_avg, eps, grad_avg=None, **kwargs):
    "Step for SGD with momentum with `lr`"
    denom = sqr_avg.sqrt().add_(eps)
    p.data.addcdiv_(-lr, (grad_avg if grad_avg is not None else p.grad), denom)
    return p

rms_prop_step.defaults = dict(eps=1e-8)

def RMSProp(params, lr, sqr_mom=0.99, mom=0., wd=0., true_wd=True):
    "A `StatefulOptimizer` for RMSProp with `lr`, `sqr_mom`, `mom` and `params`"
    steppers = [] if wd==0. else [weight_decay] if true_wd else [l2_reg]
    steppers.append(rms_prop_step)
    stats = [average_sqr_grad] if mom==0. else [average_grad, average_sqr_grad]
    return StatefulOptimizer(params, steppers, stats=stats, lr=lr, mom=mom, sqr_mom=sqr_mom, wd=wd)

def step_stat(state, p, **kwargs):
    "Register the number of steps done in `state` for `p`"
    if 'step' not in state: state['step'] = 0
    state['step'] += 1
    return state

def _debias(mom, damp, step): return damp * (1 - mom**step) / (1-mom)

def adam_step(p, lr, mom, step, sqr_mom, grad_avg, sqr_avg, eps, **kwargs):
    debias1 = _debias(mom,     1-mom,     step)
    debias2 = _debias(sqr_mom, 1-sqr_mom, step)
    p.data.addcdiv_(-lr / debias1, grad_avg, (sqr_avg/debias2).sqrt() + eps)
    return p

adam_step._defaults = dict(eps=1e-5)

def Adam(params, lr, mom=0.9, sqr_mom=0.99, eps=1e-5, wd=0., true_wd=True):
    "A `StatefulOptimizer` for Adam with `lr`, `mom`, `sqr_mom`, `eps` and `params`"
    steppers = [] if wd==0. else [weight_decay] if true_wd else [l2_reg]
    steppers.append(adam_step)
    stats = [partial(average_grad, dampening=True), average_sqr_grad, step_stat]
    return StatefulOptimizer(params, steppers, stats=stats, lr=lr, mom=mom, sqr_mom=sqr_mom, eps=eps, wd=wd)